<?xml version="1.0" encoding="UTF-8"?><Graph author="hankmobley" created="Fri Sep 23 09:41:37 EDT 2016" description="This graph will create all the data necessary for generating living wage reports." guiVersion="3.4.4.P" id="1474644206703" licenseType="Commercial" modified="Sat Oct 15 01:43:46 EDT 2016" modifiedBy="hankmobley" name="LivingWageGenerateReportMatrix" revision="1.69" showComponentDetails="true">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="Columns" recordDelimiter="\n" type="delimited">
<Field name="column_number" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="SQLUpdate" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="sql" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property id="GraphParameter0" name="ACTIVE_COMPANIES_TABLENAME" value="TMP_LIVING_WAGE"/>
<Property id="GraphParameter1" name="COLUMN_NUMBERS_TABLENAME" value="TMP_LIVING_WAGE_REPORT_COLUMN_NUMBERS"/>
<Property fileURL="workspace.prm" id="GraphParameter2"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Active Companies" guiX="138" guiY="10" id="TABLE_ACTIVE_COMPANIES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_LIVING_WAGE_ACTIVE;
create table LKP_LIVING_WAGE_ACTIVE (
  TICKER VARCHAR(64) NOT NULL UNIQUE
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: FIPS-PP Map" guiX="312" guiY="10" id="TABLE_FIPS_PP_MAP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_FIPS_COUNTY_TO_PP_COUNTY;
create table LKP_FIPS_COUNTY_TO_PP_COUNTY (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL UNIQUE,
  FIPS_CODE VARCHAR(5) NOT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Job Data" guiX="-31" guiY="82" id="TABLE_JOB_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA;
create table LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA (
  STATE_COUNTY_FIPS VARCHAR(5),
  JUST_CO_ID VARCHAR(15),
  COMPANY_COUNT INT,
  SUBSIDIARY VARCHAR(255),
  GOC VARCHAR(255),
  UNADJUSTED_RATE FLOAT,
  EMPLOYEES_AT_LIVING_WAGE INT
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Living Wage Avg" guiX="457" guiY="10" id="TABLE_LIVING_WAGE_AVG" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_LIVING_WAGE_AVERAGES;
create table LKP_LIVING_WAGE_AVERAGES (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL UNIQUE,
  LIVING_WAGE_AVG FLOAT NOT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Report Matrix" guiX="412" guiY="82" id="TABLE_REPORT_MATRIX" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_LIVING_WAGE_REPORT_MATRIX;
create table LKP_LIVING_WAGE_REPORT_MATRIX (
    INDUSTRY VARCHAR(255) NULL, 
    ROW_TYPE VARCHAR(64) NOT NULL, 
    JUST_CO_ID VARCHAR(15) DEFAULT '',     /*use to get name of company, not sure I will need*/
    TICKER VARCHAR(255) DEFAULT '',
    HAS_PARENT BOOLEAN DEFAULT FALSE,
    SUBSIDIARY VARCHAR(255) DEFAULT '',
    STATE_COUNTY_FIPS VARCHAR(5) DEFAULT '',
    DESCRIPTION_1 VARCHAR(64) DEFAULT '',  /*county name column*/
    DESCRIPTION_2 VARCHAR(64) DEFAULT '',  /*state column*/
    DESCRIPTION_3 VARCHAR(32) DEFAULT '',  /*living wage column*/
    DESCRIPTION_4 VARCHAR(32) DEFAULT '',  /*employee count column*/
    G1 VARCHAR(255) DEFAULT '', G2 VARCHAR(255) DEFAULT '', G3 VARCHAR(255) DEFAULT '', G4 VARCHAR(255) DEFAULT '', G5 VARCHAR(255) DEFAULT '', 
    G6 VARCHAR(255) DEFAULT '', G7 VARCHAR(255) DEFAULT '', G8 VARCHAR(255) DEFAULT '', G9 VARCHAR(255) DEFAULT '', G10 VARCHAR(255) DEFAULT '',
    G11 VARCHAR(255) DEFAULT '', G12 VARCHAR(255) DEFAULT '', G13 VARCHAR(255) DEFAULT '', G14 VARCHAR(255) DEFAULT '', G15 VARCHAR(255) DEFAULT '', 
    G16 VARCHAR(255) DEFAULT '', G17 VARCHAR(255) DEFAULT '', G18 VARCHAR(255) DEFAULT '', G19 VARCHAR(255) DEFAULT '', G20 VARCHAR(255) DEFAULT '',
    G21 VARCHAR(255) DEFAULT '', G22 VARCHAR(255) DEFAULT '', G23 VARCHAR(255) DEFAULT '', G24 VARCHAR(255) DEFAULT '', G25 VARCHAR(255) DEFAULT '', 
    G26 VARCHAR(255) DEFAULT '', G27 VARCHAR(255) DEFAULT '', G28 VARCHAR(255) DEFAULT '', G29 VARCHAR(255) DEFAULT '', G30 VARCHAR(255) DEFAULT '',
    G31 VARCHAR(255) DEFAULT '', G32 VARCHAR(255) DEFAULT '', G33 VARCHAR(255) DEFAULT '', G34 VARCHAR(255) DEFAULT '', G35 VARCHAR(255) DEFAULT '', 
    G36 VARCHAR(255) DEFAULT '', G37 VARCHAR(255) DEFAULT '', G38 VARCHAR(255) DEFAULT '', G39 VARCHAR(255) DEFAULT '', G40 VARCHAR(255) DEFAULT '',
    G41 VARCHAR(255) DEFAULT '', G42 VARCHAR(255) DEFAULT '', G43 VARCHAR(255) DEFAULT '', G44 VARCHAR(255) DEFAULT '', G45 VARCHAR(255) DEFAULT '', 
    G46 VARCHAR(255) DEFAULT '', G47 VARCHAR(255) DEFAULT '', G48 VARCHAR(255) DEFAULT '', G49 VARCHAR(255) DEFAULT '', G50 VARCHAR(255) DEFAULT '',
    LIVING_WAGE_TOTAL VARCHAR(8) DEFAULT '' /*totals of living wage across*/
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Row Type" guiX="106" guiY="82" id="TABLE_ROW_TYPE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE;
create table LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (
  ROW_TYPE VARCHAR(64) NOT NULL UNIQUE,
  ROW_SECTION INT NOT NULL,  /*0 industry header, 1 companies 2 industry footer*/
  DISPLAY_ORDER INT NOT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Subsidiary Info" guiX="-26" guiY="10" id="TABLE_SUBSIDIARY_INFO" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists LKP_LIVING_WAGE_SUBSIDIARY_INFO;
create table LKP_LIVING_WAGE_SUBSIDIARY_INFO (
  JUST_CO_ID VARCHAR(15) NOT NULL UNIQUE,
  HAS_SUBSIDIARIES BOOLEAN NOT NULL,
  ALT_COMPANY_NAME VARCHAR(128) NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Temp Col Count" guiX="561" guiY="82" id="TABLE_TEMP_COL_COUNT" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists TMP_EMP_COUNT_TOTALS;
create table TMP_EMP_COUNT_TOTALS (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  JUST_CO_ID VARCHAR(15) NOT NULL,
  SUBSIDIARY VARCHAR(255) NULL,
  EMPLOYEES_AT_LIVING_WAGE_TOTAL INT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Temp Col Numbers" guiX="625" guiY="10" id="TABLE_TEMP_COL_NUMBERS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${COLUMN_NUMBERS_TABLENAME};
create table ${COLUMN_NUMBERS_TABLENAME} (
  COLUMN_NUMBER VARCHAR(4) UNIQUE NOT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Temp GOC Order" guiX="243" guiY="82" id="TABLE_TEMP_GOC_ORDER" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists TMP_LIVING_WAGE_GOC_ORDER;
create table TMP_LIVING_WAGE_GOC_ORDER (
  SUBSIDIARY VARCHAR(255) NULL,
  JUST_CO_ID VARCHAR(15) NOT NULL,
  GOC VARCHAR(255) NOT NULL,
  GOC_COLUMN_NO INT NOT NULL
);]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Active Companies" guiX="25" guiY="190" id="ADD_ACTIVE_COMPANIES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_ACTIVE values('AZO');
insert into LKP_LIVING_WAGE_ACTIVE values('AAP');
insert into LKP_LIVING_WAGE_ACTIVE values('ORLY');
insert into LKP_LIVING_WAGE_ACTIVE values('BBBY');
insert into LKP_LIVING_WAGE_ACTIVE values('WSM');
insert into LKP_LIVING_WAGE_ACTIVE values('GME');
insert into LKP_LIVING_WAGE_ACTIVE values('BBY');
insert into LKP_LIVING_WAGE_ACTIVE values('LB');
insert into LKP_LIVING_WAGE_ACTIVE values('BURL');
insert into LKP_LIVING_WAGE_ACTIVE values('URBN');
insert into LKP_LIVING_WAGE_ACTIVE values('SBH');
insert into LKP_LIVING_WAGE_ACTIVE values('TIF');
insert into LKP_LIVING_WAGE_ACTIVE values('SIG');
insert into LKP_LIVING_WAGE_ACTIVE values('DKS');
insert into LKP_LIVING_WAGE_ACTIVE values('CAB');
insert into LKP_LIVING_WAGE_ACTIVE values('MIK');
insert into LKP_LIVING_WAGE_ACTIVE values('AMZN');
insert into LKP_LIVING_WAGE_ACTIVE values('TGT');
insert into LKP_LIVING_WAGE_ACTIVE values('KMX');
insert into LKP_LIVING_WAGE_ACTIVE values('JWN');
insert into LKP_LIVING_WAGE_ACTIVE values('KSS');
insert into LKP_LIVING_WAGE_ACTIVE values('JCP');
insert into LKP_LIVING_WAGE_ACTIVE values('DDS');
insert into LKP_LIVING_WAGE_ACTIVE values('TJX');
insert into LKP_LIVING_WAGE_ACTIVE values('DG');
insert into LKP_LIVING_WAGE_ACTIVE values('ROST');
insert into LKP_LIVING_WAGE_ACTIVE values('DLTR');
insert into LKP_LIVING_WAGE_ACTIVE values('SPLS');
insert into LKP_LIVING_WAGE_ACTIVE values('GPS');
insert into LKP_LIVING_WAGE_ACTIVE values('FL');
insert into LKP_LIVING_WAGE_ACTIVE values('HD');
insert into LKP_LIVING_WAGE_ACTIVE values('LOW');
insert into LKP_LIVING_WAGE_ACTIVE values('ULTA');
insert into LKP_LIVING_WAGE_ACTIVE values('MUSA');
insert into LKP_LIVING_WAGE_ACTIVE values('M');
insert into LKP_LIVING_WAGE_ACTIVE values('CVS');
insert into LKP_LIVING_WAGE_ACTIVE values('WBA');
insert into LKP_LIVING_WAGE_ACTIVE values('RAD');
insert into LKP_LIVING_WAGE_ACTIVE values('KR');
insert into LKP_LIVING_WAGE_ACTIVE values('WFM');
insert into LKP_LIVING_WAGE_ACTIVE values('CASY');
insert into LKP_LIVING_WAGE_ACTIVE values('SFM');
insert into LKP_LIVING_WAGE_ACTIVE values('WMT');
insert into LKP_LIVING_WAGE_ACTIVE values('COST');
insert into LKP_LIVING_WAGE_ACTIVE values('SYY');]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Col Numbers" guiX="472" guiY="267" id="ADD_COL_NUMBERS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${COLUMN_NUMBERS_TABLENAME} values('1');
insert into ${COLUMN_NUMBERS_TABLENAME} values('2');
insert into ${COLUMN_NUMBERS_TABLENAME} values('3');
insert into ${COLUMN_NUMBERS_TABLENAME} values('4');
insert into ${COLUMN_NUMBERS_TABLENAME} values('5');
insert into ${COLUMN_NUMBERS_TABLENAME} values('6');
insert into ${COLUMN_NUMBERS_TABLENAME} values('7');
insert into ${COLUMN_NUMBERS_TABLENAME} values('8');
insert into ${COLUMN_NUMBERS_TABLENAME} values('9');
insert into ${COLUMN_NUMBERS_TABLENAME} values('10');
insert into ${COLUMN_NUMBERS_TABLENAME} values('11');
insert into ${COLUMN_NUMBERS_TABLENAME} values('12');
insert into ${COLUMN_NUMBERS_TABLENAME} values('13');
insert into ${COLUMN_NUMBERS_TABLENAME} values('14');
insert into ${COLUMN_NUMBERS_TABLENAME} values('15');
insert into ${COLUMN_NUMBERS_TABLENAME} values('16');
insert into ${COLUMN_NUMBERS_TABLENAME} values('17');
insert into ${COLUMN_NUMBERS_TABLENAME} values('18');
insert into ${COLUMN_NUMBERS_TABLENAME} values('19');
insert into ${COLUMN_NUMBERS_TABLENAME} values('20');
insert into ${COLUMN_NUMBERS_TABLENAME} values('21');
insert into ${COLUMN_NUMBERS_TABLENAME} values('22');
insert into ${COLUMN_NUMBERS_TABLENAME} values('23');
insert into ${COLUMN_NUMBERS_TABLENAME} values('24');
insert into ${COLUMN_NUMBERS_TABLENAME} values('25');
insert into ${COLUMN_NUMBERS_TABLENAME} values('26');
insert into ${COLUMN_NUMBERS_TABLENAME} values('27');
insert into ${COLUMN_NUMBERS_TABLENAME} values('28');
insert into ${COLUMN_NUMBERS_TABLENAME} values('29');
insert into ${COLUMN_NUMBERS_TABLENAME} values('30');
insert into ${COLUMN_NUMBERS_TABLENAME} values('31');
insert into ${COLUMN_NUMBERS_TABLENAME} values('32');
insert into ${COLUMN_NUMBERS_TABLENAME} values('33');
insert into ${COLUMN_NUMBERS_TABLENAME} values('34');
insert into ${COLUMN_NUMBERS_TABLENAME} values('35');
insert into ${COLUMN_NUMBERS_TABLENAME} values('36');
insert into ${COLUMN_NUMBERS_TABLENAME} values('37');
insert into ${COLUMN_NUMBERS_TABLENAME} values('38');
insert into ${COLUMN_NUMBERS_TABLENAME} values('39');
insert into ${COLUMN_NUMBERS_TABLENAME} values('40');
insert into ${COLUMN_NUMBERS_TABLENAME} values('41');
insert into ${COLUMN_NUMBERS_TABLENAME} values('42');
insert into ${COLUMN_NUMBERS_TABLENAME} values('43');
insert into ${COLUMN_NUMBERS_TABLENAME} values('44');
insert into ${COLUMN_NUMBERS_TABLENAME} values('45');
insert into ${COLUMN_NUMBERS_TABLENAME} values('46');
insert into ${COLUMN_NUMBERS_TABLENAME} values('47');
insert into ${COLUMN_NUMBERS_TABLENAME} values('48');
insert into ${COLUMN_NUMBERS_TABLENAME} values('49');
insert into ${COLUMN_NUMBERS_TABLENAME} values('50');]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add FIPS-PP Map Data" guiX="503" guiY="190" id="ADD_FIPS_PP_MAP_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51003', '51901');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51031', '51911');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51059', '51919');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51069', '51921');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51089', '51929');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51095', '51931');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51153', '51942');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51161', '51944');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51165', '51947');
insert into LKP_FIPS_COUNTY_TO_PP_COUNTY values ('51199', '51958');]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Living Wage Avgs" guiX="175" guiY="267" id="ADD_LIVING_WAGE_AVGS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51933',
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips in ('51121','51750');

insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51947', 
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips in ('51165','51660');

insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51945', 
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips in ('51163','51530', '51678');

insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51953', 
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips in ('51191','51520');

insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51909', 
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips = '51019';

insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51951', 
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips in ('51177','51630');

insert into LKP_LIVING_WAGE_AVERAGES
select 
  '51955', 
  avg(_2a1pt1c_hourly)
from lkp_living_wage_mit
where state_county_fips in ('51195','51720');

insert into LKP_LIVING_WAGE_AVERAGES
select state_county_fips, _2a1pt1c_hourly
from (
  select state_county_fips, _2a1pt1c_hourly
  from lkp_living_wage_mit
  union all
  select c.fips_code state_county_fips, l._2a1pt1c_hourly
  from lkp_living_wage_mit l
  join LKP_FIPS_COUNTY_TO_PP_COUNTY c on c.state_county_fips = l.state_county_fips 
) l;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Matrix Types" guiX="338" guiY="267" id="ADD_MATRIX_TYPES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('IND_HEADER_BLANK_TOP', 0, 0);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('IND_HEADER_NAME', 0, 1);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('IND_HEADER_BLANK_BOTTOM_1', 0, 2);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('IND_HEADER_BLANK_BOTTOM_2', 0, 3);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_HEADER_BLANK_TOP', 1, 0);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_TICKER_NAME_COUNT_DIST_COLOMUN_HEADERS', 1, 1);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_TICKER_COUNT_GOC_COLUMN_HEADERS', 1, 2);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_TICKER_COUNT_DATA', 1, 3);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_TICKER_COUNT_TOTAL', 1, 4);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_HEADER_BLANK_TOP', 1, 5);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_NAME_COUNT_DIST_HEADERS', 1, 6);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_COUNT_COLUMN_HEADERS', 1, 7);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_COUNT_DATA', 1, 8);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_COUNT_TOTAL', 1, 9);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_COUNT_BLANK_BOTTOM', 1, 10);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_PAY_DIST_HEADERS', 1, 11);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_PAY_GOC_COLUMN_HEADERS', 1, 12);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_SUBSIDIARY_PAY_DATA', 1, 13);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('CO_FOOTER_BLANK_BOTTOM', 1, 14);
insert into LKP_LIVING_WAGE_REPORT_MATRIX_ROW_TYPE (ROW_TYPE, ROW_SECTION, DISPLAY_ORDER)
values ('IND_FOOTER_BLANK_BOTTOM', 2, 0);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary Info" guiX="187" guiY="190" id="ADD_SUBSIDIARY_INFO" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_SUBSIDIARY_INFO
select m.just_co_id, s.has_subsidiary
from (
  select ticker, (count(subsidiary) > 1) has_subsidiary
  from (
    select ticker, subsidiary
    from lkp_living_wage_goc_distributions d
    group by ticker, subsidiary
  ) d group by ticker
) s
join lkp_just_co_secty_master m on m.ticker_trim = s.ticker;

update LKP_LIVING_WAGE_SUBSIDIARY_INFO i
set alt_company_name = d.subsidiary
from (select ticker, subsidiary from lkp_living_wage_goc_distributions group by ticker, subsidiary) d
join lkp_just_co_secty_master m on m.ticker_trim = d.ticker 
where not i.has_subsidiaries and m.just_co_id = i.just_co_id;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Clean up County Counts" guiX="331" guiY="190" id="CLEAN_UP_COUNTY_COUNTS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/* clear rows with null employee counts. They are useless */
delete from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY where employee_count is null;]]></attr>
</Node>
</Phase>
<Phase number="2">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Alt Company Names" guiX="341" guiY="382" id="ADD_ALT_COMPANY_NAMES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update LKP_LIVING_WAGE_SUBSIDIARY_INFO i
set alt_company_name = d.subsidiary
from (select ticker, subsidiary from lkp_living_wage_goc_distributions group by ticker, subsidiary) d
join lkp_just_co_secty_master m on m.ticker_trim = d.ticker 
where not i.has_subsidiaries and m.just_co_id = i.just_co_id;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Remove Non-Active" guiX="189" guiY="382" id="REMOVE_NON_ACTIVE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[delete from LKP_LIVING_WAGE_GOC_DISTRIBUTIONS
where ticker not in (select ticker from LKP_LIVING_WAGE_ACTIVE);]]></attr>
</Node>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Missing Subsidiay Data" guiX="250" guiY="452" id="ADD_MISSING_SUBSIDIAY_DATA1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY
select c.state_county_fips, w.ticker, w.subsidiary, c.employee_count
from (
  select t.*, c.state_county_fips, c.employee_count
  from (
    select t.ticker, t.subsidiary
    from ( 
      select ticker, subsidiary 
      from LKP_LIVING_WAGE_GOC_DISTRIBUTIONS d 
      group by ticker, subsidiary
    ) t 
    join LKP_JUST_CO_SECTY_MASTER m on m.ticker_trim = t.ticker
    join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
    where s.has_subsidiaries
    group by t.ticker, t.subsidiary
    order by t.ticker, t.subsidiary
  ) t
  left join LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c on c.ticker = t.ticker and c.subsidiary = t.subsidiary
  where c.state_county_fips is null
) w
join LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c on c.ticker = w.ticker;]]></attr>
</Node>
</Phase>
<Phase number="4">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Clean up no-subsidiary Companies" guiX="230" guiY="523" id="CLEAN_UP_NO_SUBSIDIARY_COMPANIES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/* go the other direc5tion now, add up subsidiaries for parent */
/* add up county employee counts of subsidiaries for parent ticker (only applies to companies with subsidiaies */
/* "parent" data will be distinguished by having a null subsidiary */
/* if there are ANY records with a null subsidiary for a ticker, consider the work done, do not add up subsidiaries again*/

/* first, set subsidiary to null for any row associated with a ticker that only has one subsidiary name for all records */
/* that is, any company that has not been split into subsidiaries needs to have null for subsidiary name */
update LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c
set subsidiary = null
from lkp_just_co_secty_master m
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
where m.ticker_trim = c.ticker and not s.has_subsidiaries;]]></attr>
</Node>
</Phase>
<Phase number="5">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Clean up Companies with subsidiaries" guiX="222" guiY="597" id="CLEAN_UP_COMPANIES_WITH_SUBSIDIARIES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/* next delete any tickers that have at least two subsidiaries and has parent company data, */
/* which is represented by parent having a subsidiary of null */
delete from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY
where subsidiary is null and ticker in (
  select c.ticker
  from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c
  join lkp_just_co_secty_master m on m.ticker_trim = c.ticker
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
  where s.has_subsidiaries and subsidiary is null
  group by c.ticker, c.subsidiary
);]]></attr>
</Node>
</Phase>
<Phase number="6">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Parent County Counts" guiX="243" guiY="670" id="CREATE_PARENT_COUNTY_COUNTS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/* finally, add parent counts for tickers with multiple subsidiaries by adding up subsidiary counts */
insert into LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY
select c2.state_county_fips, c2.ticker, null, sum(c2.employee_count)
from (
  select c.ticker
  from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c
  join LKP_JUST_CO_SECTY_MASTER m on m.ticker_trim = c.ticker
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO i on i.just_co_id = m.just_co_id
  left join (
    select c.ticker
    from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c
    join LKP_JUST_CO_SECTY_MASTER m on m.ticker_trim = c.ticker
    join LKP_LIVING_WAGE_SUBSIDIARY_INFO i on i.just_co_id = m.just_co_id
    where i.has_subsidiaries and c.subsidiary is null
    group by c.ticker
  ) c2 on c2.ticker = c.ticker
  where c2.ticker is null and i.has_subsidiaries
  group by c.ticker
) c
join LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c2 on c2.ticker = c.ticker
group by c2.ticker, c2.state_county_fips;]]></attr>
</Node>
</Phase>
<Phase number="7">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Cleanup Dist and County Data" guiX="243" guiY="748" id="CLEANUP_DIST_AND_COUNTY_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update lkp_living_wage_goc_distributions set ticker = trim(ticker), subsidiary = trim(subsidiary);
update LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY set ticker = trim(ticker), subsidiary = trim(subsidiary);]]></attr>
</Node>
</Phase>
<Phase number="8">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Col Count Data" guiX="453" guiY="924" id="ADD_COL_COUNT_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into TMP_EMP_COUNT_TOTALS
select state_county_fips, just_co_id, subsidiary, sum(employees_at_living_wage) employees_at_living_wage 
from LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA 
group by state_county_fips, just_co_id, subsidiary;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Job County Data 1" guiX="56" guiY="845" id="ADD_JOB_COUNTY_DATA_1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA
select 
  c.state_county_fips, 
  m.just_co_id, 
  cc.co_count,
  d.subsidiary,
  cjd.job, 
  (cjd.rate/100.0)*cost_of_living_index reverse_adj, 
  cast(round((
    case
      when ((cjd.rate/100.0)*cost_of_living_index) >= l.LIVING_WAGE_AVG then 1
      else 0
    end)*c.employee_count*d.distribution
  ,0) as int) pays_living_wage
from lkp_living_wage_employee_count_by_county c
join (
  select fips_code, cost_of_living_index cost_of_living_index
  from stg_regionalpurchasingpower
  union all
  select mpp.state_county_fips fips_code, cost_of_living_index 
  from stg_regionalpurchasingpower pp
  join LKP_FIPS_COUNTY_TO_PP_COUNTY mpp on mpp.fips_code = pp.fips_code
) p on p.fips_code = c.state_county_fips
join LKP_LIVING_WAGE_AVERAGES l on l.state_county_fips = c.state_county_fips
join lkp_living_wage_goc_distributions d on d.ticker = c.ticker and d.subsidiary = c.subsidiary
join lkp_just_co_secty_master m on m.ticker_trim = d.ticker
join LKP_LIVING_WAGE_SUBSIDIARY_INFO i on i.just_co_id = m.just_co_id and i.has_subsidiaries
join lkp_fairpay_company_job_data cjd on cjd.just_co_id = m.just_co_id and cjd.job = d.goc
join (
  select ticker, count(subsidiary) co_count 
  from (
    select ticker, subsidiary
    from lkp_living_wage_goc_distributions d
    group by ticker, subsidiary
  ) d group by ticker
) cc on cc.ticker = d.ticker;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Job County Data 2" guiX="250" guiY="845" id="ADD_JOB_COUNTY_DATA_2" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA
select 
  c.state_county_fips, 
  m.just_co_id, 
  cc.co_count,
  d.subsidiary,
  cjd.job, 
  (cjd.rate/100.0)*cost_of_living_index reverse_adj, 
  cast(round((
    case
      when ((cjd.rate/100.0)*cost_of_living_index) >= l.LIVING_WAGE_AVG then 1
      else 0
    end)*c.employee_count*d.distribution
  ,0) as int) pays_living_wage
from lkp_living_wage_employee_count_by_county c
join (
  select fips_code, cost_of_living_index cost_of_living_index
  from stg_regionalpurchasingpower
  union all
  select mpp.state_county_fips fips_code, cost_of_living_index 
  from stg_regionalpurchasingpower pp
  join LKP_FIPS_COUNTY_TO_PP_COUNTY mpp on mpp.fips_code = pp.fips_code
) p on p.fips_code = c.state_county_fips
join LKP_LIVING_WAGE_AVERAGES l on l.state_county_fips = c.state_county_fips
join lkp_living_wage_goc_distributions d on d.ticker = c.ticker
join lkp_just_co_secty_master m on m.ticker_trim = d.ticker
join LKP_LIVING_WAGE_SUBSIDIARY_INFO i on i.just_co_id = m.just_co_id and not i.has_subsidiaries
join lkp_fairpay_company_job_data cjd on cjd.just_co_id = m.just_co_id and cjd.job = d.goc
join (
  select ticker, count(subsidiary) co_count 
  from (
    select ticker, subsidiary
    from lkp_living_wage_goc_distributions d
    group by ticker, subsidiary
  ) d group by ticker
) cc on cc.ticker = d.ticker;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Job County Data 3" guiX="448" guiY="845" id="ADD_JOB_COUNTY_DATA_3" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA
select state_county_fips, just_co_id, max(company_count), null, goc, avg(unadjusted_rate), sum(employees_at_living_wage)
from LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA cjd
where company_count > 1
group by just_co_id, state_county_fips, goc;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Job Order Data (no subs)" guiX="32" guiY="924" id="ADD_JOB_ORDER_DATA_NO_SUBS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into TMP_LIVING_WAGE_GOC_ORDER
select offsets.subsidiary, m.just_co_id, offsets.goc, (r - ofs + 1) col_no
from (
  select d.ticker, d.subsidiary, d.goc, rank() over (order by d.subsidiary, d.goc) r, ofs
  from lkp_living_wage_goc_distributions d
  join (
    select ticker, subsidiary, min(rnk) ofs
    from (
      select ticker, subsidiary, rank() over (order by subsidiary, goc) rnk
      from lkp_living_wage_goc_distributions
    ) ranks group by ticker, subsidiary
  ) offsets on offsets.ticker = d.ticker and offsets.subsidiary = d.subsidiary
) offsets
join lkp_just_co_secty_master m on m.ticker_trim = offsets.ticker;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Job Order Data (subs)" guiX="252" guiY="924" id="ADD_JOB_ORDER_DATA_SUBS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into TMP_LIVING_WAGE_GOC_ORDER(just_co_id, goc, goc_column_no)
select m.just_co_id, offsets.goc, (r - ofs + 1) col_no
from (
  select d.ticker, d.goc, rank() over (order by d.ticker, d.goc) r, ofs
  from (
    select ticker, goc 
    from lkp_living_wage_goc_distributions
    group by ticker, goc 
  ) d
  join (
    select ticker, min(rnk) ofs
    from (
      select d.ticker, rank() over (order by d.ticker, d.goc) rnk
      from (
        select ticker, goc 
        from lkp_living_wage_goc_distributions
        group by ticker, goc 
      ) d
      join (
        select ticker 
        from (
          select ticker, subsidiary
          from lkp_living_wage_goc_distributions
          group by ticker, subsidiary
        ) s
        group by ticker
        having count('subsidiary') > 1
      ) t on t.ticker = d.ticker
    ) ranks group by ticker
  ) offsets on offsets.ticker = d.ticker
) offsets
join lkp_just_co_secty_master m on m.ticker_trim = offsets.ticker;]]></attr>
</Node>
</Phase>
<Phase number="9">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Co Header Blank Top" guiX="30" guiY="1193" id="ADD_CO_HEADER_BLANK_TOP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX(
  industry, row_type, just_co_id, ticker
)
select
    i.just_indy industry, 'CO_HEADER_BLANK_TOP', g.just_co_id, m.ticker_trim
from (select just_co_id from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
left join LKP_JUST_CO_INDY i on i.just_co_id = g.just_co_id;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ind Header Blank Bottom 1" guiX="127" guiY="1092" id="ADD_IND_HEADER_BLANK_BOTTOM_1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type
)
select just_indy, 'IND_HEADER_BLANK_BOTTOM_1'
from TMP_LIVING_WAGE_GOC_ORDER g
left join lkp_just_co_indy i on g.just_co_id = i.just_co_id 
group by just_indy;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ind Header Blank Bottom 2" guiX="349" guiY="1092" id="ADD_IND_HEADER_BLANK_BOTTOM_2" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type
)
select just_indy, 'IND_HEADER_BLANK_BOTTOM_2'
from TMP_LIVING_WAGE_GOC_ORDER g
left join lkp_just_co_indy i on g.just_co_id = i.just_co_id 
group by just_indy;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ind Header Blank Top" guiX="163" guiY="1018" id="ADD_IND_HEADER_BLANK_TOP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type
)
select just_indy, 'IND_HEADER_BLANK_TOP'
from TMP_LIVING_WAGE_GOC_ORDER g
left join lkp_just_co_indy i on g.just_co_id = i.just_co_id 
group by just_indy;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ind Header Name" guiX="349" guiY="1018" id="ADD_IND_HEADER_NAME" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, description_1
)
select just_indy, 'IND_HEADER_NAME', isnull(just_indy,'No Industry')
from TMP_LIVING_WAGE_GOC_ORDER g
left join lkp_just_co_indy i on g.just_co_id = i.just_co_id 
group by just_indy;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary Blank Top" guiX="32" guiY="1437" id="ADD_SUBSIDIARY_BLANK_TOP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, subsidiary
)
select just_indy, 'CO_SUBSIDIARY_HEADER_BLANK_TOP', g.just_co_id, m.ticker_trim, g.subsidiary
from (select just_co_id, subsidiary from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id, subsidiary) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id
where s.has_subsidiaries;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary County Totals" guiX="146" guiY="1514" id="ADD_SUBSIDIARY_COUNTY_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update LKP_LIVING_WAGE_REPORT_MATRIX mtx 
set living_wage_total = d.employees_at_living_wage_total
from TMP_EMP_COUNT_TOTALS d 
where d.state_county_fips = mtx.state_county_fips 
  and d.just_co_id = mtx.just_co_id 
  and d.subsidiary = mtx.subsidiary 
  and mtx.row_type = 'CO_SUBSIDIARY_COUNT_DATA';]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary Data" guiX="-2" guiY="1514" id="ADD_SUBSIDIARY_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, subsidiary, state_county_fips, description_1, description_2, description_3, description_4
)
select
  just_indy, 'CO_SUBSIDIARY_COUNT_DATA', m.just_co_id, m.ticker_trim, e.subsidiary, e.state_county_fips,
  f.county_name, 
  f.state_abbreviation,
  concat('$',cast(cast(round(l.LIVING_WAGE_AVG,2) as numeric(36,2)) as varchar(8))),
  e.employee_count
from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY e
join (
  select m.ticker_trim ticker
  from TMP_LIVING_WAGE_GOC_ORDER g
  join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
  group by m.ticker_trim
) g on g.ticker = e.ticker
join (
  select a.state_county_fips, max(f.county_name) county_name, max(f.state_abbreviation) state_abbreviation
  from LKP_LIVING_WAGE_AVERAGES a
  left join LKP_CITY_FIPS f on f.state_county_fips = a.state_county_fips
  group by a.state_county_fips
) f on f.state_county_fips = e.state_county_fips
join lkp_just_co_secty_master m on m.ticker_trim = e.ticker
join LKP_LIVING_WAGE_AVERAGES l on l.state_county_fips = f.state_county_fips
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id
where s.has_subsidiaries and e.subsidiary is not null;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary GOC Headers" guiX="474" guiY="1437" id="ADD_SUBSIDIARY_GOC_HEADERS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, subsidiary, description_1, description_2, description_3, description_4
)
select just_indy, 'CO_SUBSIDIARY_COUNT_COLUMN_HEADERS', g.just_co_id, m.ticker_trim, subsidiary,
  'County', 'State', 'Living Wage', '# Employees'
from (select just_co_id, subsidiary from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id, subsidiary) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id
where subsidiary is not null and s.has_subsidiaries;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary Name and Dist Headers" guiX="218" guiY="1437" id="ADD_SUBSIDIARY_NAME_AND_DIST_HEADERS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, subsidiary, description_1
)
select just_indy, 'CO_SUBSIDIARY_NAME_COUNT_DIST_HEADERS', g.just_co_id, m.ticker_trim,
  g.subsidiary,
  g.subsidiary
from (select just_co_id, subsidiary from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id, subsidiary) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id
where subsidiary is not null and s.has_subsidiaries;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary Totals" guiX="349" guiY="1514" id="ADD_SUBSIDIARY_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, subsidiary, description_1, description_2, description_3, description_4, living_wage_total
)
select
  i.just_indy, 'CO_SUBSIDIARY_COUNT_TOTAL', m.just_co_id, m.ticker_trim, g.subsidiary,
  'Score',
  cast(round(((lw_count/emp_count_tot)*100.0),1) as numeric(36,1)),
  concat(concat(lw_count,' / '),emp_count_tot),
  emp_count_tot,
  lw_count
from (
  select g.just_co_id, g.subsidiary 
  from TMP_LIVING_WAGE_GOC_ORDER g
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on g.just_co_id = s.just_co_id
  where subsidiary is not null and s.has_subsidiaries
  group by g.just_co_id, g.subsidiary
  order by just_co_id, subsidiary
) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join (
  select c.ticker, c.subsidiary, sum(c.employee_count) emp_count_tot 
  from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c
  join lkp_just_co_secty_master m on m.ticker_trim = c.ticker
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
  where subsidiary is not null and s.has_subsidiaries
  group by c.ticker, c.subsidiary
) e on e.ticker = m.ticker_trim and e.subsidiary = g.subsidiary
join (
  select m.ticker_trim ticker, d.subsidiary, sum(employees_at_living_wage) lw_count
  from LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA d
  join lkp_just_co_secty_master m on m.just_co_id = d.just_co_id
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
  where subsidiary is not null and s.has_subsidiaries
  group by m.ticker_trim, d.subsidiary
) d on d.ticker = m.ticker_trim and d.subsidiary = g.subsidiary
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id
order by ticker_trim, g.subsidiary;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subsidiary Totals No Data" guiX="506" guiY="1514" id="ADD_SUBSIDIARY_TOTALS_NO_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/* total lable for subsidiaries without data */
insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, description_1, description_2
)
select
  i.just_indy, 'CO_SUBSIDIARY_COUNT_TOTAL', m.just_co_id, m.ticker_trim,
  'Score',
  'No Data'
from (
  select g.just_co_id, g.subsidiary 
  from TMP_LIVING_WAGE_GOC_ORDER g
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on g.just_co_id = s.just_co_id
  where subsidiary is not null and s.has_subsidiaries
  group by g.just_co_id, g.subsidiary
  order by just_co_id, subsidiary
) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = g.just_co_id
left join (
  select just_co_id, subsidiary
  from LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA 
  where subsidiary is not null
  group by just_co_id, subsidiary
) d on d.just_co_id = g.just_co_id and d.subsidiary = g.subsidiary
left join lkp_just_co_indy i on i.just_co_id = g.just_co_id
where d.just_co_id is null and s.has_subsidiaries;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker Data" guiX="27" guiY="1270" id="ADD_TICKER_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, state_county_fips, description_1, description_2, description_3, description_4
)
select
  just_indy, 'CO_TICKER_COUNT_DATA', m.just_co_id, m.ticker_trim, e.state_county_fips,
  f.county_name, 
  f.state_abbreviation,
  concat('$',cast(cast(round(l.LIVING_WAGE_AVG,2) as numeric(36,2)) as varchar(8))),
  e.employee_count
from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY e
join (
  select m.ticker_trim ticker
  from TMP_LIVING_WAGE_GOC_ORDER g
  join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
  group by m.ticker_trim
) g on g.ticker = e.ticker
join (
  select a.state_county_fips, max(f.county_name) county_name, max(f.state_abbreviation) state_abbreviation
  from LKP_LIVING_WAGE_AVERAGES a
  left join LKP_CITY_FIPS f on f.state_county_fips = a.state_county_fips
  group by a.state_county_fips
) f on f.state_county_fips = e.state_county_fips
join lkp_just_co_secty_master m on m.ticker_trim = e.ticker
join LKP_LIVING_WAGE_AVERAGES l on l.state_county_fips = f.state_county_fips
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id
where e.subsidiary is null;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker GOC Headers" guiX="453" guiY="1193" id="ADD_TICKER_GOC_HEADERS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, description_1, description_2, description_3, description_4
)
select just_indy, 'CO_TICKER_COUNT_GOC_COLUMN_HEADERS', g.just_co_id, m.ticker_trim,
  'County', 'State', 'Living Wage', '# Employees'
from (select just_co_id from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker Name and Dist Headers" guiX="219" guiY="1193" id="ADD_TICKER_NAME_AND_DIST_HEADERS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, description_1, description_2
)
select just_indy, 'CO_TICKER_NAME_COUNT_DIST_COLOMUN_HEADERS', g.just_co_id, m.ticker_trim, m.ticker_trim, 
  case
    when s.alt_company_name is null then m.co_long_name
    else s.alt_company_name
  end company_name
from (select just_co_id from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join lkp_living_wage_subsidiary_info s on s.just_co_id = g.just_co_id
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker (no subs) County Totals" guiX="381" guiY="1270" id="ADD_TICKER_NO_SUBS_COUNTY_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update LKP_LIVING_WAGE_REPORT_MATRIX mtx 
set living_wage_total = d.employees_at_living_wage_total
from TMP_EMP_COUNT_TOTALS d 
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = d.just_co_id
where d.state_county_fips = mtx.state_county_fips 
  and d.just_co_id = mtx.just_co_id 
  and not s.has_subsidiaries
  and mtx.row_type = 'CO_TICKER_COUNT_DATA';]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker (subs) County Totals" guiX="162" guiY="1270" id="ADD_TICKER_SUBS_COUNTY_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update LKP_LIVING_WAGE_REPORT_MATRIX mtx 
set living_wage_total = d.employees_at_living_wage_total
from TMP_EMP_COUNT_TOTALS d 
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = d.just_co_id
where d.state_county_fips = mtx.state_county_fips 
  and d.just_co_id = mtx.just_co_id 
  and d.subsidiary is null
  and s.has_subsidiaries
  and mtx.row_type = 'CO_TICKER_COUNT_DATA';]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker Totals" guiX="154" guiY="1341" id="ADD_TICKER_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, description_1, description_2, description_3, description_4, living_wage_total
)
select
  i.just_indy, 'CO_TICKER_COUNT_TOTAL', m.just_co_id, m.ticker_trim,
  'Score',
  cast(round(((lw_count/emp_count_tot)*100.0),1) as numeric(36,1)),
  concat(concat(lw_count,' / '),emp_count_tot),
  emp_count_tot,
  lw_count
from (select just_co_id from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join (
  select c.ticker, sum(c.employee_count) emp_count_tot 
  from LKP_LIVING_WAGE_EMPLOYEE_COUNT_BY_COUNTY c
  join lkp_just_co_secty_master m on m.ticker_trim = c.ticker
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
  where c.subsidiary is null and not s.has_subsidiaries
  group by c.ticker
) e on e.ticker = m.ticker_trim
join (
  select m.ticker_trim ticker, sum(employees_at_living_wage) lw_count
  from LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA d
  join lkp_just_co_secty_master m on m.just_co_id = d.just_co_id
  join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id
  where subsidiary is not null and not s.has_subsidiaries
  group by m.ticker_trim
) d on d.ticker = m.ticker_trim
left join lkp_just_co_indy i on i.just_co_id = m.just_co_id;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Ticker Totals No Data" guiX="294" guiY="1341" id="ADD_TICKER_TOTALS_NO_DATA" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/* total lable for companies without data */
insert into LKP_LIVING_WAGE_REPORT_MATRIX (
  industry, row_type, just_co_id, ticker, description_1, description_2
)
select
  i.just_indy, 'CO_TICKER_COUNT_TOTAL', m.just_co_id, m.ticker_trim,
  'Score',
  'No Data'
from (select just_co_id from TMP_LIVING_WAGE_GOC_ORDER group by just_co_id) g
join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id
join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = g.just_co_id
left join (select just_co_id from LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA group by just_co_id) d on d.just_co_id = g.just_co_id
left join lkp_just_co_indy i on i.just_co_id = g.just_co_id
where d.just_co_id is null and not s.has_subsidiaries;]]></attr>
</Node>
</Phase>
<Phase number="10">
<Node enabled="enabled" guiName="Create Update Dist Header SQL" guiX="219" guiY="1618" id="CREATE_UPDATE_DIST_HEADER_SQL" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = d.distribution ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id ";
	sql = sql + "join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id ";
	sql = sql + "join lkp_living_wage_goc_distributions d on d.ticker = m.ticker_trim and d.goc = g.goc and d.subsidiary = g.subsidiary ";
	sql = sql + "where (not s.has_subsidiaries) and g.just_co_id = mtx.just_co_id and mtx.row_type = 'CO_TICKER_NAME_COUNT_DIST_COLOMUN_HEADERS' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";

	$out.0.sql = sql;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Create Update Subsidiary Data SQL" guiX="211" guiY="2057" id="CREATE_UPDATE_SUBSIDIARY_DATA_SQL" type="REFORMAT">
<attr name="transform"><![CDATA[// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = concat(concat(concat(";
	sql = sql + "  d.employees_at_living_wage,' ('),";
	sql = sql + "  concat('$',cast(cast(round(d.unadjusted_rate,2) as numeric(36,2)) as varchar(8)))";
	sql = sql + "),')') ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA d on d.just_co_id = g.just_co_id and d.goc = g.goc and d.subsidiary = g.subsidiary ";
	sql = sql + "where d.state_county_fips = mtx.state_county_fips and g.just_co_id = mtx.just_co_id and g.subsidiary = mtx.subsidiary and mtx.row_type = 'CO_SUBSIDIARY_COUNT_DATA' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";
	
	$out.0.sql = sql;

	return ALL;
}]]></attr>
</Node>
<Node enabled="enabled" guiName="Create Update Subsidiary Dist Headers SQL" guiX="185" guiY="1908" id="CREATE_UPDATE_SUBSIDIARY_DIST_HEADERS_SQL" type="REFORMAT">
<attr name="transform"><![CDATA[// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = d.distribution ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id ";
	sql = sql + "join lkp_living_wage_goc_distributions d on d.ticker = m.ticker_trim and d.goc = g.goc and d.subsidiary = g.subsidiary ";
	sql = sql + "join LKP_LIVING_WAGE_SUBSIDIARY_INFO s on s.just_co_id = m.just_co_id ";
	sql = sql + "where g.subsidiary is not null and g.subsidiary = mtx.subsidiary and g.just_co_id = mtx.just_co_id and mtx.row_type = 'CO_SUBSIDIARY_NAME_COUNT_DIST_HEADERS' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";
	
	$out.0.sql = sql;

	return ALL;
}]]></attr>
</Node>
<Node enabled="enabled" guiName="Create Update Subsidiary GOC Headers SQL" guiX="186" guiY="1984" id="CREATE_UPDATE_SUBSIDIARY_GOC_HEADERS_SQL" type="REFORMAT">
<attr name="transform"><![CDATA[// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = g.goc ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id ";
	sql = sql + "join lkp_living_wage_goc_distributions d on d.ticker = m.ticker_trim and d.goc = g.goc and d.subsidiary = g.subsidiary ";
	sql = sql + "where g.subsidiary is not null and g.subsidiary = mtx.subsidiary and g.just_co_id = mtx.just_co_id and mtx.row_type = 'CO_SUBSIDIARY_COUNT_COLUMN_HEADERS' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";
	
	$out.0.sql = sql;

	return ALL;
}]]></attr>
</Node>
<Node enabled="enabled" guiName="Create Update Ticker Data SQL" guiX="222" guiY="1839" id="CREATE_UPDATE_TICKER_DATA_SQL" type="REFORMAT">
<attr name="transform"><![CDATA[// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = concat(concat(concat(";
	sql = sql + "  d.employees_at_living_wage,' ('),";
	sql = sql + "  concat('$',cast(cast(round(d.unadjusted_rate,2) as numeric(36,2)) as varchar(8)))";
	sql = sql + "),')') ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join LKP_LIVING_WAGE_COMPANY_JOB_COUNTY_DATA d on d.just_co_id = g.just_co_id and d.goc = g.goc and ((d.company_count = 1) or (d.company_count > 1 and d.subsidiary is null and g.subsidiary is null)) ";
	sql = sql + "where d.state_county_fips = mtx.state_county_fips and g.just_co_id = mtx.just_co_id and mtx.row_type = 'CO_TICKER_COUNT_DATA' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";
	
	$out.0.sql = sql;

	return ALL;
}]]></attr>
</Node>
<Node enabled="enabled" guiName="Create Update Ticker (no subs) GOC Header SQL" guiX="171" guiY="1763" id="CREATE_UPDATE_TICKER_NO_SUBS_GOC_HEADER_SQL" type="REFORMAT">
<attr name="transform"><![CDATA[// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = g.goc ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id ";
	sql = sql + "join lkp_living_wage_goc_distributions d on d.ticker = m.ticker_trim and d.goc = g.goc and d.subsidiary = g.subsidiary ";
	sql = sql + "join lkp_living_wage_subsidiary_info s on s.just_co_id = g.just_co_id ";
	sql = sql + "where not s.has_subsidiaries and g.just_co_id = mtx.just_co_id and mtx.row_type = 'CO_TICKER_COUNT_GOC_COLUMN_HEADERS' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";
	
	$out.0.sql = sql;

	return ALL;
}]]></attr>
</Node>
<Node enabled="enabled" guiName="Create Update Ticker (subs) GOC Header SQL" guiX="171" guiY="1692" id="CREATE_UPDATE_TICKER_SUBS_GOC_HEADER_SQL1" type="REFORMAT">
<attr name="transform"><![CDATA[// Transforms input record into output record.
function integer transform() {
	string sql = "";
	sql = sql + "update LKP_LIVING_WAGE_REPORT_MATRIX mtx ";
	sql = sql + "set g" + $in.0.column_number + " = g.goc ";
	sql = sql + "from TMP_LIVING_WAGE_GOC_ORDER g ";
	sql = sql + "join lkp_just_co_secty_master m on m.just_co_id = g.just_co_id ";
	sql = sql + "join lkp_living_wage_goc_distributions d on d.ticker = m.ticker_trim and d.goc = g.goc ";
	sql = sql + "join lkp_living_wage_subsidiary_info s on s.just_co_id = g.just_co_id ";
	sql = sql + "where g.subsidiary is null and s.has_subsidiaries and g.just_co_id = mtx.just_co_id and mtx.row_type = 'CO_TICKER_COUNT_GOC_COLUMN_HEADERS' ";
	sql = sql + "  and g.goc_column_no = " + $in.0.column_number + ";";
	
	$out.0.sql = sql;

	return ALL;
}]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Read Columns" guiX="-1" guiY="1827" id="READ_COLUMNS" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select $column_number:=column_number
from ${COLUMN_NUMBERS_TABLENAME}
order by column_number;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Subsidiary Data" guiX="528" guiY="2057" id="UPDATE_SUBSIDIARY_DATA" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Subsidiary Dist Headers" guiX="505" guiY="1908" id="UPDATE_SUBSIDIARY_DIST_HEADERS" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Subsidiary GOC Headers" guiX="503" guiY="1984" id="UPDATE_SUBSIDIARY_GOC_HEADERS" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Ticker Data" guiX="535" guiY="1839" id="UPDATE_TICKER_DATA" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Ticker Dist Headers" guiX="505" guiY="1618" id="UPDATE_TICKER_DIST_HEADERS" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Ticker (no subs) GOC Headers" guiX="496" guiY="1763" id="UPDATE_TICKER_NO_SUBS_GOC_HEADERS1" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Ticker (subs) GOC Headers" guiX="496" guiY="1692" id="UPDATE_TICKER_SUBS_GOC_HEADERS" type="DB_EXECUTE" url="port:$0.sql:discrete"/>
<Edge fromNode="CREATE_UPDATE_DIST_HEADER_SQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_TICKER_DIST_HEADERS:0"/>
<Edge fromNode="CREATE_UPDATE_SUBSIDIARY_DATA_SQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_SUBSIDIARY_DATA:0"/>
<Edge fromNode="CREATE_UPDATE_SUBSIDIARY_DIST_HEADERS_SQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_SUBSIDIARY_DIST_HEADERS:0"/>
<Edge fromNode="CREATE_UPDATE_SUBSIDIARY_GOC_HEADERS_SQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_SUBSIDIARY_GOC_HEADERS:0"/>
<Edge fromNode="CREATE_UPDATE_TICKER_DATA_SQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_TICKER_DATA:0"/>
<Edge fromNode="CREATE_UPDATE_TICKER_NO_SUBS_GOC_HEADER_SQL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_TICKER_NO_SUBS_GOC_HEADERS1:0"/>
<Edge fromNode="CREATE_UPDATE_TICKER_SUBS_GOC_HEADER_SQL1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (input parameters)" metadata="Metadata1" outPort="Port 0 (out)" toNode="UPDATE_TICKER_SUBS_GOC_HEADERS:0"/>
<Edge fromNode="READ_COLUMNS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="CREATE_UPDATE_DIST_HEADER_SQL:0"/>
<Edge fromNode="READ_COLUMNS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="CREATE_UPDATE_TICKER_SUBS_GOC_HEADER_SQL1:0"/>
<Edge fromNode="READ_COLUMNS:2" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 2 (out)" toNode="CREATE_UPDATE_TICKER_NO_SUBS_GOC_HEADER_SQL:0"/>
<Edge fromNode="READ_COLUMNS:3" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 3 (out)" toNode="CREATE_UPDATE_TICKER_DATA_SQL:0"/>
<Edge fromNode="READ_COLUMNS:4" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 4 (out)" toNode="CREATE_UPDATE_SUBSIDIARY_DIST_HEADERS_SQL:0"/>
<Edge fromNode="READ_COLUMNS:5" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 5 (out)" toNode="CREATE_UPDATE_SUBSIDIARY_GOC_HEADERS_SQL:0"/>
<Edge fromNode="READ_COLUMNS:6" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 6 (out)" toNode="CREATE_UPDATE_SUBSIDIARY_DATA_SQL:0"/>
</Phase>
<Phase number="11">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Temp Col Count Table" guiX="259" guiY="2154" id="DROP_TEMP_COL_COUNT_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists TMP_EMP_COUNT_TOTALS;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Temp Col Numbers Table" guiX="458" guiY="2154" id="DROP_TEMP_COL_NUMBERS_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${COLUMN_NUMBERS_TABLENAME};]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Temp GOC Order Table" guiX="56" guiY="2154" id="DROP_TEMP_GOC_ORDER_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists TMP_LIVING_WAGE_GOC_ORDER;]]></attr>
</Node>
</Phase>
</Graph>
