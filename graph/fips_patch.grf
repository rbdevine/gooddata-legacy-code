<?xml version="1.0" encoding="UTF-8"?><Graph author="pradeep" created="Wed Dec 02 20:34:37 IST 2015" guiVersion="3.4.4.P" id="1449069673827" licenseType="Commercial" modified="Wed Jul 27 23:51:59 IST 2016" modifiedBy="pradeep" name="glassdoor" revision="1.110" showComponentDetails="true">
<Global>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="fips_1_csv_reader_to_reformatter_metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="latitude" type="string"/>
<Field name="longitude" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata7" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="fips_2_reformat_to_rest_connector_metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="latitude" type="string"/>
<Field name="longitude" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="fips_3_rest_conector_to_json_reader_metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="response" type="string"/>
<Field name="latitude" type="string"/>
<Field name="longitude" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="fips_4_json_reader_to_reformat_metadat" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="block_fips" type="string"/>
<Field name="country_fips" type="string"/>
<Field name="country_name" type="string"/>
<Field name="state_fips" type="string"/>
<Field name="state_code" type="string"/>
<Field name="state_name" type="string"/>
<Field name="latitude" type="string"/>
<Field name="longitude" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata6" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="fips_5_reformat_to_csv_writer_metadat" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="block_fips" type="string"/>
<Field name="country_fips" type="string"/>
<Field name="country_name" type="string"/>
<Field name="state_fips" type="string"/>
<Field name="state_code" type="string"/>
<Field name="state_name" type="string"/>
<Field name="latitude" type="string"/>
<Field name="longitude" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="recordName1" recordDelimiter="\n" type="delimited">
<Field name="response" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName2" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="employer_name" type="string"/>
<Field name="id" type="string"/>
<Field name="industry" type="string"/>
<Field name="sectorId" type="string"/>
<Field name="sectorName" type="string"/>
<Field name="industryId" type="string"/>
<Field name="industryName" type="string"/>
<Field name="overallRating" type="string"/>
<Field name="cultureAndValuesRating" type="string"/>
<Field name="seniorLeadershipRating" type="string"/>
<Field name="compensationAndBenefitsRating" type="string"/>
<Field name="careerOpportunitiesRating" type="string"/>
<Field name="workLifeBalanceRating" type="string"/>
<Field name="recommendToFriendRating" type="string"/>
<Field name="pctApprove" type="string"/>
<Field name="pctDisapprove" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName3" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="employer_name" nullable="true" shift="0" size="0" type="string"/>
<Field name="id" type="string"/>
<Field name="industry" type="string"/>
<Field name="sectorId" type="string"/>
<Field name="sectorName" type="string"/>
<Field name="industryId" type="string"/>
<Field name="industryName" type="string"/>
<Field name="overallRating" type="number"/>
<Field name="cultureAndValuesRating" type="number"/>
<Field name="seniorLeadershipRating" type="number"/>
<Field name="compensationAndBenefitsRating" type="number"/>
<Field name="careerOpportunitiesRating" type="number"/>
<Field name="workLifeBalanceRating" type="number"/>
<Field name="recommendToFriendRating" type="number"/>
<Field name="pctApprove" type="number"/>
<Field name="pctDisapprove" type="number"/>
</Record>
</Metadata>
<Metadata id="Metadata8" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName4" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="response" type="string"/>
<Field name="latitude" type="string"/>
<Field name="longitude" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata9">
<Record fieldDelimiter="|" name="recordName5" recordDelimiter="\r\n" type="delimited">
<Field name="response" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="append input port data in response json (patch)" guiX="524" guiY="344" id="APPEND_INPUT_PORT_DATA_IN_RESPONSE_JSON_PATCH" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	string latlonjson = ", \"latitude\" : \""+$in.0.latitude+"\", \"longitude\" : \""+$in.0.longitude+"\" }";
	$out.0.response = substring($in.0.response,0,length($in.0.response)-1)+latlonjson;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATA_SOURCE_DIR}/output.csv" guiName="CSV Writer" guiX="1281" guiY="77" id="CSV_WRITER1" outputFieldNames="true" type="DATA_WRITER"/>
<Node charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#9;printLog(info, &quot;iterationNumber - - - &gt; &quot; + iterationNumber);&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    requestParams[&quot;latitude&quot;] = $in.0.latitude;&#10;    requestParams[&quot;longitude&quot;] = $in.0.longitude;&#10;    &#10;   &#10;    &#10;    return requestParams;&#10;}&#10;function integer transform() {&#10;&#9;&#10;&#9;printLog(info,'inside rest conector transform');&#10;&#9;&#10;&#9;&#10;&#9;$out.0.latitude = $in.0.latitude;&#10;&#9;$out.0.longitude = $in.0.longitude;&#10;&#9;return ALL;&#10;}&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#9;&#10;&#9;printLog(info, &quot;responseBody - - - &gt; &quot; + responseBody);&#10;&#9; &#10;     if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;         return &quot;DONE_WITH_OUTPUT&quot;;&#10;     }&#10;     else if (responseStatus == 404) {&#10;     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;         return &quot;DONE_NO_OUTPUT&quot;;&#10;    }&#10;     else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;      // Internal server errors could be temporary (this sends the last response to the error output port)&#10;        return &quot;RETRY&quot;;&#10;     }&#10;     else {&#10;       // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;         return &quot;FATAL_ERROR&quot;;&#10;     }&#10;}&#10;&#10;&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;   &#10;    return modifiedRequestParams;&#10;}" enabled="enabled" guiName="invoke fips rest web-service" guiX="330" guiY="228" id="INVOKE_FIPS_REST_WEB_SERVICE" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[http://data.fcc.gov/api/block/2010/find?format=json&showall=true&latitude=${latitude}&longitude=${longitude}]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="port:$0.response:discrete" guiName="parse fips json response " guiX="843" guiY="473" id="PARSE_FIPS_JSON_RESPONSE" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<Context xpath="/root/object" outPort="0">
  <Mapping cloverField="block_fips" xpath="Block/FIPS"/>
  <Mapping cloverField="country_fips" xpath="County/FIPS"/>
  <Mapping cloverField="country_name" xpath="County/name"/>
  <Mapping cloverField="state_fips" xpath="State/FIPS"/>
  <Mapping cloverField="state_code" xpath="State/code"/>
  <Mapping cloverField="state_name" xpath="State/name"/>
  <Mapping cloverField="latitude" xpath="latitude"/>
  <Mapping cloverField="longitude" xpath="longitude"/>
  
  
</Context>

	]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATA_SOURCE_DIR}/lat_long.csv" guiName="read lat_long.csv" guiX="20" guiY="50" id="READ_LAT_LONG_CSV1" type="DATA_READER"/>
<Node enabled="enabled" guiName="reformat lat-long" guiX="199" guiY="111" id="REFORMAT_LAT_LONG1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
$out.0.latitude = $in.0.latitude;
	$out.0.longitude = $in.0.longitude;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="reformat parsed response" guiX="1093" guiY="307" id="REFORMAT_PARSED_RESPONSE" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	printLog(info,'test---------------- inside transform '+$in.0.latitude);
	printLog(info,'test---------------- inside transform '+$in.0.block_fips);
	
	$out.0.block_fips = $in.0.block_fips;
	$out.0.country_fips = $in.0.country_fips;
	$out.0.country_name = $in.0.country_name;
	$out.0.state_fips = $in.0.state_fips;
	$out.0.state_code = $in.0.state_code;
	$out.0.state_name = $in.0.state_name;
	$out.0.latitude = $in.0.latitude;
	$out.0.longitude = $in.0.longitude;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="APPEND_INPUT_PORT_DATA_IN_RESPONSE_JSON_PATCH:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata9" outPort="Port 0 (out)" toNode="PARSE_FIPS_JSON_RESPONSE:0"/>
<Edge fromNode="INVOKE_FIPS_REST_WEB_SERVICE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (output)" toNode="APPEND_INPUT_PORT_DATA_IN_RESPONSE_JSON_PATCH:0"/>
<Edge fromNode="PARSE_FIPS_JSON_RESPONSE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="REFORMAT_PARSED_RESPONSE:0"/>
<Edge fromNode="READ_LAT_LONG_CSV1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (output)" toNode="REFORMAT_LAT_LONG1:0"/>
<Edge fromNode="REFORMAT_LAT_LONG1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 0 (in)" metadata="Metadata7" outPort="Port 0 (out)" toNode="INVOKE_FIPS_REST_WEB_SERVICE:0"/>
<Edge fromNode="REFORMAT_PARSED_RESPONSE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (in)" metadata="Metadata6" outPort="Port 0 (out)" toNode="CSV_WRITER1:0"/>
</Phase>
</Graph>
