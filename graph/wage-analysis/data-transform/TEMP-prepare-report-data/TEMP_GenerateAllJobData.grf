<?xml version="1.0" encoding="UTF-8"?><Graph author="hankmobley" created="Sun Sep 04 11:29:08 EDT 2016" description="This step generates all the data required for all industry and company summary reports.&#10;It does not generate the reports themselves, but rather makes data available for reports&#10;to be created separately.&#10;&#10;This graph only needs to be run if cut-criteria for what's included changes or if the underlying&#10;salary data is updated or added to (which is done in a separate step.)&#10;&#10;This graph assumes the main salaray data table has been generated. (As of this writing, the &#10;table is called, JUST_WAGE, but since we may be incorporating&#10;non-glassdoor data, may change it to LKP_FAIRPAY_SALARY_DW)." guiVersion="3.4.4.P" id="1473004233680" licenseType="Commercial" modified="Fri Jun 16 11:09:11 EDT 2017" modifiedBy="richdevine" name="FairPayGenerateLookupMatrix" revision="1.110" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="ProcessTypeId" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="ProcessTypeID" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="RunGraph_Name" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="Name" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="SQL_Industry_Queue" recordDelimiter="\n" type="delimited">
<Field name="sql" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property fileURL="wage.prm" id="GraphParameter0"/>
<Property fileURL="wage-fairpay-livingwage-shared-parameters.prm" id="GraphParameter39"/>
<Property fileURL="wage-staging.prm" id="GraphParameter48"/>
<Property fileURL="workspace.prm" id="GraphParameter68"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Company Job Data Table" guiX="30" guiY="12" id="CREATE_COMPANY_JOB_DATA_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${COMPANY_JOB_DATA_TABLENAME};
create table if not exists ${COMPANY_JOB_DATA_TABLENAME} (
  PROCESS_TYPE_ID INTEGER NOT NULL,
  TICKER VARCHAR(16) NOT NULL,
  JOB VARCHAR(255) NOT NULL, 
  RATE FLOAT NULL,
  SCORE INT NULL,
  RATE_RAW FLOAT NULL,
  SCORE_RAW INT NULL,
  TOTAL INT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Company Table" guiX="257" guiY="12" id="CREATE_COMPANY_TABLE1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${COMPANY_TABLENAME};
create table if not exists ${COMPANY_TABLENAME} (
  PROCESS_TYPE_ID INTEGER NOT NULL,
  TICKER VARCHAR(16) NOT NULL,
  COMPANY_COLUMN_NO INT
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Job Table" guiX="430" guiY="12" id="CREATE_JOB_TABLE1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${JOB_TABLENAME};
create table if not exists ${JOB_TABLENAME} (
  PROCESS_TYPE_ID INTEGER NOT NULL,
  INDUSTRY VARCHAR(255) NOT NULL,
  JOB VARCHAR(255) NOT NULL,
  COMPANY_COUNT INT NOT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Param Table" guiX="430" guiY="95" id="CREATE_PARAM_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${PARAM_TABLENAME};

create table ${PARAM_TABLENAME} (
  PROCESS_TYPE_ID INT NOT NULL,
  MIN_JOB_COUNT_PER_CO_SCORE_1 INT NOT NULL,
  MIN_JOB_COUNT_PER_CO_SCORE_2 INT NOT NULL,
  MIN_JOB_COUNT_PER_CO_SCORE_3 INT NOT NULL,  
  MIN_JOBS_PER_CO INT NOT NULL,
  MIN_CO_PER_JOB INT NOT NULL,
  MIN_IND_GOC_CO_COUNT INT NOT NULL,
  MIN_DATA_POINTS_PER_CO INT NOT NULL,
  COMBINE_SUBSIDIARY_TICKER_UNDER_PARENT BOOLEAN NOT NULL,
  INDUSTRY VARCHAR(64) NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Process Queue" guiX="83" guiY="95" id="CREATE_PROCESS_QUEUE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_PROCESS_QUEUE};
create table if not exists ${TABLE_PROCESS_QUEUE} (
  ID AUTO_INCREMENT,
  PROCESS_TYPE_ID INTEGER UNIQUE NOT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Process Table" guiX="257" guiY="95" id="CREATE_PROCESS_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_PROCESS};
create table if not exists ${TABLE_PROCESS} (
  PROCESS_TYPE_ID INTEGER UNIQUE NOT NULL,
  PROCESS VARCHAR(64) UNIQUE NOT NULL,
  MIN_COMPANIES_PER_JOC INTEGER NOT NULL,
  MIN_DATA_POINTS_PER_COMPANY INTEGER NOT NULL,
  MIN_INDUSTRY_JOCS_PER_COMPANY INTEGER NULL,
  MIN_JOCS_PER_COMPANY INTEGER NOT NULL,
  MIN_JOCS_PER_COMPANY_SCORE_1 INTEGER NOT NULL,
  MIN_JOCS_PER_COMPANY_SCORE_2 INTEGER NOT NULL,
  MIN_JOCS_PER_COMPANY_SCORE_3 INTEGER NOT NULL,
  COMBINE_SUBSIDIARY_TICKER_UNDER_PARENT BOOLEAN NOT NULL
);
]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Process Table" guiX="251" guiY="171" id="POPULATE_PROCESS_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/***************************************************************
  For reasons that are unclear, when ${CONST_COMBINE_SUBSIDIARY_TICKER_UNDER_PARENT}
  is set to false, fair pay ends up second in the process queue
  and in turn somehow causes double fair pay jobs to be created
  in the reports. Since only interested in fair pay for now,
  commenting out the living wage, but this issue will need to 
  be resolved.
***************************************************************/
INSERT INTO ${TABLE_PROCESS} 
VALUES (1,'FairPay',
		${CONST_FP_MIN_COMPANIES_PER_JOC},
		${CONST_FP_MIN_DATA_POINTS_PER_COMPANY},
		${CONST_FP_MIN_INDUSTRY_JOCS_PER_COMPANY},
		${CONST_FP_MIN_JOCS_PER_COMPANY},
		${CONST_FP_MIN_JOCS_PER_COMPANY_SCORE_1},
		${CONST_FP_MIN_JOCS_PER_COMPANY_SCORE_2},
		${CONST_FP_MIN_JOCS_PER_COMPANY_SCORE_3},
		${CONST_COMBINE_SUBSIDIARY_TICKER_UNDER_PARENT}
);

INSERT INTO ${TABLE_PROCESS} 
VALUES (2,'LivingWage',
		${CONST_LW_MIN_COMPANIES_PER_JOC},
		${CONST_LW_MIN_DATA_POINTS_PER_COMPANY},
		${CONST_LW_MIN_INDUSTRY_JOCS_PER_COMPANY},
		${CONST_LW_MIN_JOCS_PER_COMPANY},
		${CONST_LW_MIN_JOCS_PER_COMPANY_SCORE_1},
		${CONST_LW_MIN_JOCS_PER_COMPANY_SCORE_2},
		${CONST_LW_MIN_JOCS_PER_COMPANY_SCORE_3},
		${CONST_COMBINE_SUBSIDIARY_TICKER_UNDER_PARENT}
);
]]></attr>
</Node>
</Phase>
<Phase number="2">
<Node enabled="enabled" guiName="Generate Process Data" guiX="403" guiY="338" id="GENERATE_PROCESS_DATA" passThroughInputPort="0" type="RUN_GRAPH"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Process Queue" guiX="248" guiY="249" id="POPULATE_PROCESS_QUEUE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_PROCESS_QUEUE} (
  PROCESS_TYPE_ID
)
SELECT PROCESS_TYPE_ID
FROM ${TABLE_PROCESS}
ORDER BY PROCESS_TYPE_ID;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Read Process Queue" guiX="29" guiY="338" id="READ_PROCESS_QUEUE" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[SELECT $ProcessTypeID:=process_type_id
FROM ${TABLE_PROCESS_QUEUE}
ORDER BY process_type_id;]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="237" guiY="338" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Name = "${GRAPH_DIR}/wage-analysis/data-transform/TEMP-prepare-report-data/TEMP_GenerateJobData.grf";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="READ_PROCESS_QUEUE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REFORMAT:0"/>
<Edge fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in regular mode: names of the graphs to be executed, otherwise nothing)" metadata="Metadata2" outPort="Port 0 (out)" toNode="GENERATE_PROCESS_DATA:0"/>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Param Table" guiX="350" guiY="423" id="DROP_PARAM_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${PARAM_TABLENAME};]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Process Queue" guiX="192" guiY="423" id="DROP_PROCESS_QUEUE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_PROCESS_QUEUE};]]></attr>
</Node>
</Phase>
</Graph>
