<?xml version="1.0" encoding="UTF-8"?><Graph author="hankmobley" created="Sun Sep 04 11:29:08 EDT 2016" description="This step generates all the data required for all industry and company summary reports.&#10;It does not generate the reports themselves, but rather makes data available for reports&#10;to be created separately.&#10;&#10;This graph only needs to be run if cut-criteria for what's included changes or if the underlying&#10;salary data is updated or added to (which is done in a separate step.)&#10;&#10;This graph assumes the main salaray data table has been generated. (As of this writing, the &#10;table is called, JUST_WAGE, but since we may be incorporating&#10;non-glassdoor data, may change it to LKP_FAIRPAY_SALARY_DW)." guiVersion="3.4.4.P" id="1473004233680" licenseType="Commercial" modified="Mon Jul 10 14:40:23 EDT 2017" modifiedBy="richdevine" name="FairPayGenerateLookupMatrix" revision="1.190" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="ProcessTypeId" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="ProcessTypeID" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="RunGraph_Name" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="Name" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="SQL_Industry_Queue" recordDelimiter="\n" type="delimited">
<Field name="sql" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property fileURL="wage.prm" id="GraphParameter0"/>
<Property fileURL="wage-fairpay-livingwage-shared-parameters.prm" id="GraphParameter57"/>
<Property fileURL="wage-staging.prm" id="GraphParameter66"/>
<Property fileURL="workspace.prm" id="GraphParameter89"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Create Company Location Detail Table" guiX="128" guiY="18" id="CREATE_COMPANY_LOCATION_DETAIL_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_COMPANY_LOCATION_DETAIL};
create table ${TABLE_COMPANY_LOCATION_DETAIL} (
  GEO_CODE FLOAT NULL,  /*  may split into latitude, longitude, geo_accuracy - see CountyEmployeeCountFranchise.grf metadata for details */
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  TICKER VARCHAR(16) NOT NULL,
  SUBSIDIARY VARCHAR(64) NULL,
  JOC VARCHAR(128) NOT NULL,
  EMPLOYEE_COUNT_LIVING_WAGE_TOTAL INT NOT NULL,
  EMPLOYEE_COUNT_TOTAL INT NULL,
  EMPLOYEE_COUNT_SUBSIDY_TOTAL FLOAT NULL,
  WAGE_HOURLY_RAW FLOAT NOT NULL,
  WAGE_HOURLY_COLA FLOAT NOT NULL,
  WAGE_HOURLY_RAW_MIN_WAGE_ADJ FLOAT NULL,
  SUBSIDY_TOTAL FLOAT NULL,
  SUBSIDY_BY_EMPLOYEE_TOTAL FLOAT NULL,
  SUBSIDY_ABS_BY_EMPLOYEE_TOTAL FLOAT NULL,
  SUBSIDY_SUM_BY_EMPLOYEE_TOTAL FLOAT NULL,
  EMPLOYEE_COUNT_EITC INT NULL,
  SUBSIDY_TOTAL_EITC FLOAT NULL,
  SUBSIDY_BY_EMP_EITC FLOAT NULL,
  SUBSIDY_ABS_BY_EMP_EITC FLOAT NULL,
  EMPLOYEE_COUNT_SNAP INT NULL,
  SUBSIDY_TOTAL_SNAP FLOAT NULL,
  SUBSIDY_BY_EMP_SNAP FLOAT NULL,
  SUBSIDY_ABS_BY_EMP_SNAP FLOAT NULL,
  EMPLOYEE_COUNT_ADULT_MEDICAID INT NULL,
  SUBSIDY_TOTAL_ADULT_MEDICAID FLOAT NULL,
  SUBSIDY_BY_EMP_ADULT_MEDICAID FLOAT NULL,
  SUBSIDY_ABS_BY_EMP_ADULT_MEDICAID FLOAT NULL,
  EMPLOYEE_COUNT_CHILD_MEDICAID INT NULL,
  SUBSIDY_TOTAL_CHILD_MEDICAID FLOAT NULL,
  SUBSIDY_BY_EMP_CHILD_MEDICAID FLOAT NULL,
  SUBSIDY_ABS_BY_EMP_CHILD_MEDICAID FLOAT NULL,
  EMPLOYEE_COUNT_ACA INT NULL,
  SUBSIDY_TOTAL_ACA FLOAT NULL,
  SUBSIDY_BY_EMP_ACA FLOAT NULL,
  SUBSIDY_ABS_BY_EMP_ACA FLOAT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Employee Count Total" guiX="396" guiY="18" id="TABLE_EMPLOYEE_COUNT_TOTAL" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_EMPLOYEE_COUNT_TOTAL};
create table ${TABLE_EMPLOYEE_COUNT_TOTAL} (
  TICKER VARCHAR(16) NOT NULL,
  SUBSIDIARY VARCHAR(255),
  EMP_COUNT_TOT INT NOT NULL
);]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Remove Subidiary Ticker Distribution" guiX="381" guiY="97" id="REMOVE_SUBIDIARY_TICKER_DISTRIBUTION" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[delete from ${TABLE_JOC_DISTRIBUTION}
where ticker in (select ticker from ${TABLE_COMPANY_LIVING_WAGE} where has_subsidiaries)
and subsidiary is null;
]]></attr>
</Node>
</Phase>
<Phase number="2">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add All sans Subsidiary Parents" guiX="147" guiY="181" id="ADD_ALL_SANS_SUBSIDIARY_PARENTS" type="DB_EXECUTE">
<attr name="guiDescription"><![CDATA[Inserts subsidiary data. Parent data depends on this, therefore it must be done in a phase prior to inputing parent data.]]></attr>
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_COMPANY_LOCATION_DETAIL}
(state_county_fips, ticker, subsidiary, joc, employee_count_total, wage_hourly_raw, wage_hourly_cola, employee_count_living_wage_total)
select 
  cc.state_county_fips,
  d.ticker,
  cc.subsidiary,
  ws.joc,
  cast(cc.employee_count*d.distribution as int) emp_count,
  cast(round((ws.wage_hourly_cola/100.0)*f.cost_of_living_index,2) as numeric (16,2)) reverse_adj, 
  ws.wage_hourly_cola,
  cast(
   (
    case
      when ((ws.wage_hourly_cola/100.0)*f.cost_of_living_index) >= f.living_wage_hourly then 1
      else 0
    end
  )*cc.employee_count*d.distribution as int) pays_living_wage
from ${TABLE_COUNTY_EMPLOYEE_COUNT} cc
join ${TABLE_FIPS_DATA} f on f.state_county_fips = cc.state_county_fips
join ${TABLE_JOC_DISTRIBUTION} d on d.ticker = cc.ticker and isnull(cc.subsidiary,d.subsidiary) = d.subsidiary
join (
  select 
    c.ticker,
    s.subsidiary_name
  from ${TABLE_COMPANY} c
  left join ${TABLE_SUBSIDIARY} s on c.ticker = s.ticker_parent
  where s.ticker_subsidiary is null
  union all
  select s.ticker_subsidiary, null subsidiary_name
  from ${TABLE_SUBSIDIARY} s
  join ${TABLE_COMPANY} c on c.ticker = s.ticker_parent
  where ticker_subsidiary is not null
) c on c.ticker = d.ticker and isnull(c.subsidiary_name,d.subsidiary) = d.subsidiary
join ${TABLE_WAGE_SUMMARY} ws on ws.ticker = cc.ticker and ws.joc = d.joc
where 
  cc.employee_count is not null and 
  d.distribution is not null and
  ws.wage_hourly_cola is not null and
  f.cost_of_living_index is not null
  and (
    d.ticker not in (select ticker_parent from ${TABLE_SUBSIDIARY} where ticker_subsidiary is null group by ticker_parent)
    or cc.subsidiary is not null
  );]]></attr>
</Node>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Calculated Subsidiary Parents" guiX="139" guiY="281" id="ADD_CALCULATED_SUBSIDIARY_PARENTS" type="DB_EXECUTE">
<attr name="guiDescription"><![CDATA[Inserts subsidiary data. Parent data depends on this, therefore it must be done in a phase prior to inputing parent data.]]></attr>
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_COMPANY_LOCATION_DETAIL}
(state_county_fips, ticker, joc, employee_count_total, wage_hourly_raw, wage_hourly_cola, employee_count_living_wage_total)
select
  l.state_county_fips,
  l.ticker,
  l.joc,
  sum(employee_count_total),
  cast(round(avg(wage_hourly_raw),2) as numeric(16,2)),
  cast(round(avg(wage_hourly_cola),2) as numeric(16,2)),
  sum(employee_count_living_wage_total)
from ${TABLE_COMPANY_LOCATION_DETAIL} l
join ${TABLE_SUBSIDIARY} s on s.ticker_parent = l.ticker and s.subsidiary_name = l.subsidiary
join ${TABLE_COMPANY} c on c.ticker = s.ticker_parent
where s.ticker_subsidiary is null
group by l.state_county_fips, l.ticker, l.joc;
]]></attr>
</Node>
</Phase>
<Phase number="4">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Min Avg State Salaries" guiX="160" guiY="381" id="ADD_MIN_AVG_STATE_SALARIES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[UPDATE ${TABLE_STATE_DETAIL} d
SET MINIMUM_AVG_WAGE_RAW = t.MINIMUM_AVG_WAGE_RAW
FROM (
  select
    t.state,
    cast(round(min(t.avg_rate_raw),2) as numeric(16,2)) minimum_avg_wage_raw
  from (
    select
      fs.state,
      ld.joc,
      avg(ld.wage_hourly_raw) avg_rate_raw
    from ${TABLE_COMPANY_LOCATION_DETAIL} ld
    join (
      select 
        state_fips, 
        state_abbreviation state 
      from ${TABLE_CITY_FIPS}
      group by
        state_fips, 
        state_abbreviation
    ) fs on fs.state_fips = left(ld.state_county_fips,2)
    group by fs.state, ld.ticker, ld.joc
  ) t
  group by t.state
) t
WHERE d.state = t.state;]]></attr>
</Node>
</Phase>
<Phase number="5">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Minimum Wage Adjustments" guiX="155" guiY="457" id="MINIMUM_WAGE_ADJUSTMENTS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_COMPANY_LOCATION_DETAIL} cd
set WAGE_HOURLY_RAW_MIN_WAGE_ADJ = (
  case
    when (cd.wage_hourly_raw < f.living_wage_hourly
          and sd.minimum_avg_wage_raw < (sd.minimum_wage + ${CONST_MINIMUM_WAGE_CUSHION})
       ) then cd.wage_hourly_raw + (sd.minimum_wage - sd.minimum_avg_wage_raw) + ${CONST_MINIMUM_WAGE_CUSHION}
    else cd.wage_hourly_raw
  end
)
from ${TABLE_STATE_DETAIL} sd
join ${TABLE_FIPS_DATA} f on true
where left(cd.state_county_fips,2) = sd.state_fips and cd.state_county_fips = f.state_county_fips;]]></attr>
</Node>
</Phase>
<Phase number="6">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Minimum Wage Clean Up Bottom" guiX="147" guiY="535" id="MINIMUM_WAGE_CLEAN_UP_BOTTOM" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_COMPANY_LOCATION_DETAIL} ld
set WAGE_HOURLY_RAW_MIN_WAGE_ADJ = (sd.minimum_wage + ${CONST_MINIMUM_WAGE_CUSHION})
from ${TABLE_STATE_DETAIL} sd
where sd.state_fips = left(ld.state_county_fips,2) and ld.WAGE_HOURLY_RAW_MIN_WAGE_ADJ < (sd.minimum_wage + ${CONST_MINIMUM_WAGE_CUSHION});]]></attr>
</Node>
</Phase>
<Phase number="7">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Employee Count Total" guiX="381" guiY="605" id="POPULATE_EMPLOYEE_COUNT_TOTAL1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_EMPLOYEE_COUNT_TOTAL}
select 
  ticker, 
  subsidiary, 
  sum(employee_count_total) employee_count_total 
from ${TABLE_COMPANY_LOCATION_DETAIL} 
group by ticker, subsidiary
order by ticker, subsidiary;]]></attr>
</Node>
</Phase>
<Phase number="8">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Subidiary Ticker Distribution" guiX="377" guiY="678" id="ADD_SUBIDIARY_TICKER_DISTRIBUTION" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_JOC_DISTRIBUTION}
select t2.ticker, null subsidiary, t1.joc, sum(dist_count)/t2.emp_count_tot distribution
from (
  select t.ticker, t.subsidiary, d.joc, t.emp_count_tot * d.distribution dist_count
  from ${TABLE_EMPLOYEE_COUNT_TOTAL} t
  join ${TABLE_JOC_DISTRIBUTION} d on d.ticker = t.ticker and d.subsidiary = t.subsidiary
) t1
join ${TABLE_EMPLOYEE_COUNT_TOTAL} t2 on t2.ticker = t1.ticker
join ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = t2.ticker
where t2.subsidiary is null and c.has_subsidiaries
group by t2.ticker, t1.joc, t2.emp_count_tot
]]></attr>
</Node>
</Phase>
</Graph>
