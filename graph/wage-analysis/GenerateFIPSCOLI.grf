<?xml version="1.0" encoding="UTF-8"?><Graph author="hankmobley" created="Thu Sep 22 10:24:29 EDT 2016" description="This massages the original fair pay data sources into a smaller, more managable table to&#10;act as the data source for later, more coplex queries to generate reports.&#10;&#10;At the time of this writing, only glassdoor data is being used, but we could add other &#10;sources later.&#10;&#10;In additoin to creating the lookup table, it also cleans up a few issues with fips matching&#10;and adds some titles (e..g., software engineer 3 - 5 years)" guiVersion="3.4.4.P" id="1474554360353" licenseType="Commercial" modified="Wed Apr 26 00:12:45 EDT 2017" modifiedBy="hankmobley" name="FairPayGenerateLookupTables" revision="1.243" showComponentDetails="true">
<Global>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property id="GraphParameter0" name="STG_TABLE_CENSUS_FIPS" value="STG_WAGE_CENSUS_2010_FIPS"/>
<Property id="GraphParameter39" name="STG_TABLE_CITY_FIPS" value="LKP_CITY_FIPS"/>
<Property id="GraphParameter1" name="STG_TABLE_GOC_SALARY_ADJUSTMENT" value="STG_WAGE_GOC_SALARY_ADJUSTMENT"/>
<Property id="GraphParameter2" name="STG_TABLE_JOB_LEVEL" value="STG_WAGE_JOB_LEVEL"/>
<Property id="GraphParameter3" name="STG_TABLE_LIVING_WAGE_MIT" value="LKP_LIVING_WAGE_MIT"/>
<Property id="GraphParameter4" name="STG_TABLE_REGIONAL_PURCHASING_POWER" value="STG_REGIONALPURCHASINGPOWER"/>
<Property id="GraphParameter5" name="STG_TABLE_SALARY_ADJ_BY_YEAR" value="STG_WAGE_SALARY_ADJ_BY_YEAR"/>
<Property id="GraphParameter6" name="TMP_TABLE_CENSUS_MAPPED_FIPS" value="TMP_WAGE_CENSUS_MAPPED_FIPS"/>
<Property id="GraphParameter7" name="TMP_TABLE_CITY_NAME_OVERRIDE" value="TMP_WAGE_CITY_NAME_OVERRIDE"/>
<Property id="GraphParameter8" name="TMP_TABLE_FIPS_MAP" value="TMP_WAGE_FIPS_MAP"/>
<Property id="GraphParameter40" name="TMP_TABLE_LIVING_WAGE_OVERRIDE" value="TMP_WAGE_LIVING_WAGE_OVERRIDE"/>
<Property fileURL="wage-analysis.prm" id="GraphParameter9"/>
<Property fileURL="workspace.prm" id="GraphParameter21"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="disabled" graphName="${GRAPH_DIR}/wage-analysis/data-loading/Census2010FIPS.grf" guiName="Load Staging Data: Census 2010 FIPS" guiX="1" guiY="6" id="LOAD_STAGING_DATA_CENSUS_2010_FIPS" type="RUN_GRAPH"/>
<Node enabled="disabled" graphName="${GRAPH_DIR}/RegionalPurchasingPower.grf" guiName="Load Staging Data: Cost of Living Index" guiX="255" guiY="12" id="LOAD_STAGING_DATA_COST_OF_LIVING_INDEX" type="RUN_GRAPH"/>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: COLI Avgs" guiX="58" guiY="108" id="TABLE_COLI_AVGS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/********************************************************************************
  ${TABLE_COLI_AVG} 
  average cost os living index for city_fips
  For counties (most) that have only one city_fips/state pair, value will be for
  just that county.
  For others (e.g., NEW YORK< NY with 5 counties) the average is taken and 
  assigned to the city_fips/state.
*********************************************************************************/
drop table if exists ${TABLE_COLI_AVG};
create table ${TABLE_COLI_AVG} (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  CITY_FIPS VARCHAR(5) UNIQUE NOT NULL,
  STATE VARCHAR(2) NOT NULL,
  CITY VARCHAR(128) NOT NULL,
  AVG_COST_OF_LIVING_INDEX FLOAT NULL,
  LIVING_WAGE_HOURLY FLOAT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Temp Table: Census Mapped FIPS" guiX="213" guiY="108" id="TEMP_TABLE_CENSUS_MAPPED_FIPS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/*
  ${TMP_TABLE_CENSUS_MAPPED_FIPS} 
  Convenience table to have state_county_fips code mapped to matching coli data.
*/
drop table if exists ${TMP_TABLE_CENSUS_MAPPED_FIPS};
create table ${TMP_TABLE_CENSUS_MAPPED_FIPS} (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  STATE_COUNTY_FIPS_COLI VARCHAR(5) NOT NULL,
  ENTITY_FIPS VARCHAR(5) NOT NULL,
  STATE VARCHAR(2) NOT NULL,
  ENTITY_NAME VARCHAR(64) NOT NULL,
  ENTITY_DESCRIPTION VARCHAR(64) NOT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Temp Table: CIty Name Override" guiX="23" guiY="182" id="TEMP_TABLE_CITY_NAME_OVERRIDE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/*
  ${TMP_TABLE_CITY_NAME_OVERRIDE}
  These cities were not found in the census data. Manually looked up with lkp_city_fips, which is
  now otherwise not being used for wage analysis. (At least, that's the plan, as of this writing.)
*/
drop table if exists ${TMP_TABLE_CITY_NAME_OVERRIDE};
create table ${TMP_TABLE_CITY_NAME_OVERRIDE} (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  CITY_FIPS VARCHAR(5) NOT NULL,
  STATE VARCHAR(2) NOT NULL,
  CITY VARCHAR(64) NOT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Temp Table: FIPS Map" guiX="246" guiY="182" id="TEMP_TABLE_FIPS_MAP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/*
  ${TMP_TABLE_FIPS_MAP} 
  Virginia had some exceptions for some virginia cities. They seemed to have made
  up their own fips code. Need to map to census fips code, which is what we will
  be using for visual mapping later.
*/
drop table if exists ${TMP_TABLE_FIPS_MAP};
create table ${TMP_TABLE_FIPS_MAP} (
  STATE_COUNTY_FIPS_CENSUS VARCHAR(5) UNIQUE NOT NULL,
  STATE_COUNTY_FIPS_COLI VARCHAR(5) NOT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Temp Table: Living Wage Override" guiX="409" guiY="182" id="TEMP_TABLE_LIVING_WAGE_OVERRIDE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/*
  ${TMP_TABLE_LIVING_WAGE_OVERRIDE}
  Some special cases arose with living wage data (e.g., Columbia City, MD)
*/
drop table if exists ${TMP_TABLE_LIVING_WAGE_OVERRIDE};
create table ${TMP_TABLE_LIVING_WAGE_OVERRIDE} (
  STATE_COUNTY_FIPS_LW VARCHAR(5) NOT NULL,
  STATE_COUNTY_FIPS_CENSUS VARCHAR(5) NOT NULL,
  CITY_FIPS VARCHAR(5) NOT NULL
);
]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate City Name Override" guiX="33" guiY="262" id="POPULATE_CITY_NAME_OVERRIDE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('05107','31190','AR','WEST HELENA');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('06109','56870','CA','PHOENIX LAKE');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('08043','11810','CO','CAÃ‘ON CITY');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('08037','23300','CO','EDWARDS');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('09015','85810','CT','WILLIMANTIC');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('12017','32400','FL','HOMOSASSA SPRINGS');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('12083','71625','FL','THE VILLAGES');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('12119','71625','FL','THE VILLAGES');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('13059','03440','GA','ATHENS');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('13245','04204','GA','AUGUSTA');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('15003','71550','HI','HONOLULU');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('16001','08830','ID','BOISE');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('21067','46027','KY','LEXINGTON');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('21111','48006','KY','LOUISVILLE');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('22115','26746','LA','FORT POLK NORTH');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('22007','60075','LA','PIERRE PART');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('29169','25264','MO','FORT LEONARD WOOD');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('30093','11397','MT','BUTTE');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('32510','09700','NV','CARSON CITY');
/*
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('29055','71440','MO','SULLIVAN');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('29071','71440','MO','SULLIVAN');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('24027','19125','MD','COLUMBIA');
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('51005','17440','VA','CLIFTON FORGE');
*/
insert into ${TMP_TABLE_CITY_NAME_OVERRIDE} values('47037','52006','TN','NASHVILLE');
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate FIPS Map" guiX="255" guiY="262" id="POPULATE_FIPS_MAP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TMP_TABLE_FIPS_MAP} values ('30077','30023');
insert into ${TMP_TABLE_FIPS_MAP} values ('51003','51901');
insert into ${TMP_TABLE_FIPS_MAP} values ('51540','51901');
insert into ${TMP_TABLE_FIPS_MAP} values ('51005','51903');
insert into ${TMP_TABLE_FIPS_MAP} values ('51580','51903');
insert into ${TMP_TABLE_FIPS_MAP} values ('51015','51907');
insert into ${TMP_TABLE_FIPS_MAP} values ('51790','51907');
insert into ${TMP_TABLE_FIPS_MAP} values ('51820','51907');
insert into ${TMP_TABLE_FIPS_MAP} values ('51019','51909'); 
insert into ${TMP_TABLE_FIPS_MAP} values ('51515','51909');
insert into ${TMP_TABLE_FIPS_MAP} values ('51031','51911');
insert into ${TMP_TABLE_FIPS_MAP} values ('51680','51911');
insert into ${TMP_TABLE_FIPS_MAP} values ('51035','51913');
insert into ${TMP_TABLE_FIPS_MAP} values ('51640','51913');
insert into ${TMP_TABLE_FIPS_MAP} values ('51053','51918');
insert into ${TMP_TABLE_FIPS_MAP} values ('51570','51918');
insert into ${TMP_TABLE_FIPS_MAP} values ('51730','51918');
insert into ${TMP_TABLE_FIPS_MAP} values ('51059','51919'); 
insert into ${TMP_TABLE_FIPS_MAP} values ('51600','51919');
insert into ${TMP_TABLE_FIPS_MAP} values ('51610','51919');
insert into ${TMP_TABLE_FIPS_MAP} values ('51069','51921'); 
insert into ${TMP_TABLE_FIPS_MAP} values ('51840','51921');
insert into ${TMP_TABLE_FIPS_MAP} values ('51081','51923'); 
insert into ${TMP_TABLE_FIPS_MAP} values ('51595','51923');
insert into ${TMP_TABLE_FIPS_MAP} values ('51089','51929');
insert into ${TMP_TABLE_FIPS_MAP} values ('51690','51929');
insert into ${TMP_TABLE_FIPS_MAP} values ('51095','51931');
insert into ${TMP_TABLE_FIPS_MAP} values ('51830','51931');
insert into ${TMP_TABLE_FIPS_MAP} values ('51121','51933');
insert into ${TMP_TABLE_FIPS_MAP} values ('51750','51933');
insert into ${TMP_TABLE_FIPS_MAP} values ('51143','51939');
insert into ${TMP_TABLE_FIPS_MAP} values ('51590','51939');
insert into ${TMP_TABLE_FIPS_MAP} values ('51149','51941');
insert into ${TMP_TABLE_FIPS_MAP} values ('51670','51941');
insert into ${TMP_TABLE_FIPS_MAP} values ('51153','51942');
insert into ${TMP_TABLE_FIPS_MAP} values ('51683','51942');
insert into ${TMP_TABLE_FIPS_MAP} values ('51685','51942');
insert into ${TMP_TABLE_FIPS_MAP} values ('51161','51944');
insert into ${TMP_TABLE_FIPS_MAP} values ('51770','51944');
insert into ${TMP_TABLE_FIPS_MAP} values ('51775','51944');
insert into ${TMP_TABLE_FIPS_MAP} values ('51163','51945');
insert into ${TMP_TABLE_FIPS_MAP} values ('51530','51945');
insert into ${TMP_TABLE_FIPS_MAP} values ('51678','51945');
insert into ${TMP_TABLE_FIPS_MAP} values ('51165','51947');
insert into ${TMP_TABLE_FIPS_MAP} values ('51660','51947');
insert into ${TMP_TABLE_FIPS_MAP} values ('51175','51949');
insert into ${TMP_TABLE_FIPS_MAP} values ('51620','51949');
insert into ${TMP_TABLE_FIPS_MAP} values ('51177','51951');
insert into ${TMP_TABLE_FIPS_MAP} values ('51630','51951');
insert into ${TMP_TABLE_FIPS_MAP} values ('51191','51953');
insert into ${TMP_TABLE_FIPS_MAP} values ('51520','51953');
insert into ${TMP_TABLE_FIPS_MAP} values ('51195','51955');
insert into ${TMP_TABLE_FIPS_MAP} values ('51720','51955');
insert into ${TMP_TABLE_FIPS_MAP} values ('51199','51958'); 
insert into ${TMP_TABLE_FIPS_MAP} values ('51735','51958');
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Living Wage Override" guiX="409" guiY="262" id="POPULATE_LIVING_WAGE_OVERRIDE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TMP_TABLE_LIVING_WAGE_OVERRIDE} values('24028','24027','19125');]]></attr>
</Node>
</Phase>
<Phase number="2">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Census Mapped FIPS" guiX="109" guiY="348" id="POPULATE_CENSUS_MAPPED_FIPS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TMP_TABLE_CENSUS_MAPPED_FIPS}
select
  f.state_county_fips,
  case
    when m.state_county_fips_coli is null then f.state_county_fips
    else m.state_county_fips_coli
  end state_county_fips_coli,
  f.entity_fips,
  f.state, 
  f.entity_name,
  f.entity_description
from ${STG_TABLE_CENSUS_FIPS} f
left join ${TMP_TABLE_FIPS_MAP} m on m.state_county_fips_census = f.state_county_fips
]]></attr>
</Node>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate COLI Avgs By City" guiX="116" guiY="426" id="POPULATE_COLI_AVGS_BY_CITY" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[SET LOCALE to LEN_S1;

insert into ${TABLE_COLI_AVG}
/***********************************************************
  avg cost of living per unique state/city_fips
  since cities sometimes span multiple counties,
  there are cases where a state_county_fips has multiple
  cost of living. This would happen if one city spans 2
  or more counties and one of those counties also has other
  cities in it.
************************************************************/
select
  details.state_county_fips,
  avgs.city_fips,
  avgs.state,
  details.city,
  avgs.avg_cost_of_living_index
from (
  /********************************************************
    average per unique city_fips/state pair of type 'city'
  *********************************************************/
  select
    census.entity_fips city_fips,
    census.state,
    cast(round(avg(cola.cost_of_living_index),1) as numeric(16,1)) avg_cost_of_living_index
  from ${TMP_TABLE_CENSUS_MAPPED_FIPS} census
  join ${STG_TABLE_REGIONAL_PURCHASING_POWER} cola on cola.fips_code = census.state_county_fips_coli
  where entity_description = 'city'
  group by census.state, census.entity_fips
) avgs
join (
  /***************************************************************
    unique state_county_fips/city_fips/state/city sets
    note: some cities will have multiple state_count_fips. 
    (e.g., New York, NY has one state_county_fips per borough, 
    but many cities span multiple counties, so not unque to nyc.)
  ****************************************************************/
  select
    state_county_fips,
    entity_fips city_fips,
    state,
    entity_name city
  from ${TMP_TABLE_CENSUS_MAPPED_FIPS}
  group by state_county_fips, entity_fips, state, entity_name
) details on details.state = avgs.state and details.city_fips = avgs.city_fips;]]></attr>
</Node>
</Phase>
<Phase number="4">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add COLI Avgs By Unique Non-City/Non-County" guiX="59" guiY="503" id="ADD_COLI_AVGS_BY_UNIQUE_NON_CITY_NON_COUNTY" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[SET LOCALE to LEN_S1;

insert into ${TABLE_COLI_AVG}
select
  f.state_county_fips, 
  f.city_fips, 
  f.state, 
  f.city, 
  p.cost_of_living_index
from (
  /*****************************************************************************
    filter out lines with multiple state_county_fips, valid cases of that would
    be cities that span multiple counties and those cases would have the same
    city_fips and be identified with description of 'city', thus were already
    picked up in the first round.
  ******************************************************************************/
  select 
    city, state
  from (
    /*************************************************************************************************
      census city/state matches with missing data
      this will pick up census data whose description is not 'city' ('munipality', 'township', etc.), 
      which was specified as critia for first pass at averages.
      in this case, ignore all but county types.
      group with state_county_fips, so multiple state_county_fips entries can be identified.
    **************************************************************************************************/
    select 
      f.state_county_fips, missing.*
    from (
      /******************************************************
        glass door city/state not yet put in averages table
      *******************************************************/
      select g.*
      from (
        /***************************
          city/state from glassdoor
        ****************************/
        select cityname city, stateabbreviation state
        from ${STG_TABLE_GLASSDOOR_WAGE}
        group by cityname, stateabbreviation
      ) g
      left join (
        /*****************************************
          city/state we already have averages for
        *******************************************/
        select c.state, c.city
        from ${TABLE_COLI_AVG} c
        group by c.state, c.city
      ) f on f.state = g.state and f.city = g.city
      where f.state is null
    ) missing
    join ${STG_TABLE_CENSUS_FIPS} f on f.state = missing.state and f.entity_name = missing.city
    where f.entity_description <> 'county'
    group by f.state_county_fips, missing.state, missing.city
  ) t
  group by state, city
  having count(state_county_fips) = 1
) t
join (
  /*************************************************************************
    sets of unique state_county_fips/city_fips/state/city from census table
  **************************************************************************/
  select 
    state_county_fips,
    state_county_fips_coli, 
    entity_fips city_fips,
    state, 
    entity_name city
  from ${TMP_TABLE_CENSUS_MAPPED_FIPS}
  group by state_county_fips, state_county_fips_coli, entity_fips, state, entity_name
) f on f.state = t.state and f.city = t.city
join ${STG_TABLE_REGIONAL_PURCHASING_POWER} p on p.fips_code = f.state_county_fips_coli;
]]></attr>
</Node>
</Phase>
<Phase number="5">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add City Name Overrides" guiX="116" guiY="580" id="ADD_CITY_NAME_OVERRIDES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[SET LOCALE to LEN_S1;

insert into ${TABLE_COLI_AVG}
/********************************************************************
  some city/state pairs did not match values in ${STG_TABLE_CENSUS_FIPS}
*********************************************************************/
select
  override.state_county_fips,
  override.city_fips,
  override.state,
  override.city,
  coli.avg_cost_of_living_index
from ${TMP_TABLE_CITY_NAME_OVERRIDE} override
join (
  select
    o.state,
    o.city_fips,
    cast(round(avg(c.cost_of_living_index),1) as numeric(16,1)) avg_cost_of_living_index
  from ${TMP_TABLE_CITY_NAME_OVERRIDE} o
  join ${STG_TABLE_REGIONAL_PURCHASING_POWER} c on c.fips_code = o.state_county_fips
  group by o.state, o.city_fips
) coli on coli.state = override.state and coli.city_fips = override.city_fips;]]></attr>
</Node>
</Phase>
<Phase number="6">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update with Living Wage" guiX="117" guiY="653" id="UPDATE_WITH_LIVING_WAGE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/********************************************************************
  add matched living wage values
*********************************************************************/
update ${TABLE_COLI_AVG} c
set living_wage_hourly = cast(round(mit._2a1pt1c_hourly,1) as numeric(16,3))
from ${STG_TABLE_LIVING_WAGE_MIT} mit
join (
  select state_county_fips 
  from ${TABLE_COLI_AVG} 
  group by state_county_fips
) a on a.state_county_fips = mit.state_county_fips
where c.state_county_fips = a.state_county_fips;]]></attr>
</Node>
</Phase>
<Phase number="7">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add Unmatched Living Wage" guiX="107" guiY="728" id="ADD_UNMATCHED_LIVING_WAGE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/********************************************************************
  add living wage entries for living wage not in coli avg table.
  may be moot since glassdoor data doesn't match with this anyhow
  (all glassdoor city/state already accounted for by this point.)
*********************************************************************/
insert into ${TABLE_COLI_AVG}
select distinct
  f.state_county_fips,
  case
    when length(f.city_fips) = 0 then '00000'
    when length(f.city_fips) = 1 then concat('0000',f.city_fips)
    when length(f.city_fips) = 2 then concat('000',f.city_fips)
    when length(f.city_fips) = 3 then concat('00',f.city_fips)
    when length(f.city_fips) = 4 then concat('0',f.city_fips)
    when length(f.city_fips) > 5 then substr(f.city_fips,0,6)
    else f.city_fips
  end city_fips,
  f.state,
  f.city,
  null avg_cost_of_living_index,
  cast(round(_2a1pt1c_hourly,3) as numeric(16,3)) living_wage_hourly
from (
  /**************************************************************************
    living wage not in ${TABLE_COLI_AVG} (fips is already mapped to census)
  ***************************************************************************/
  select
    f.state_county_fips, 
    f._2a1pt1c_hourly
  from ${STG_TABLE_LIVING_WAGE_MIT} f
  left join (
    /*************************************************************************
      unique fips in the coli avg table
    **************************************************************************/
    select state_county_fips 
    from ${TABLE_COLI_AVG} 
    group by state_county_fips
  ) a on a.state_county_fips = f.state_county_fips
  where a.state_county_fips is null
) a
join (
  /*******************************************************************
    fips data--state_county_fips not found in census table
  ********************************************************************/
  select 
    f.state_county_fips,
    city_fips, 
    state_abbreviation state, 
    city_name city
  from ${STG_TABLE_CITY_FIPS} f
  group by f.state_county_fips, city_fips, state_abbreviation, city_name
) f on f.state_county_fips = a.state_county_fips
order by f.state, f.city;]]></attr>
</Node>
</Phase>
<Phase number="8">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add LIving Wage Overrides" guiX="110" guiY="800" id="ADD_LIVING_WAGE_OVERRIDES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[/********************************************************************
  need to account for special cases in ${STG_TABLE_LIVING_WAGE_MIT}
  (e.g., columbia city, MD)
  Note: a consequence is that these will be only state_county_fips
  with more than one living_wage value
*********************************************************************/
update ${TABLE_COLI_AVG} coli
set living_wage_hourly = cast(round(mit._2a1pt1c_hourly,3) as numeric(16,3))
from ${TMP_TABLE_LIVING_WAGE_OVERRIDE} o
join ${STG_TABLE_LIVING_WAGE_MIT} mit on mit.state_county_fips = o.state_county_fips_lw
where 
  coli.state_county_fips = o.state_county_fips_census and
  coli.city_fips = o.city_fips;]]></attr>
</Node>
</Phase>
<Phase number="9">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Census Mapped FIPS" guiX="121" guiY="878" id="DROP_CENSUS_MAPPED_FIPS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table ${TMP_TABLE_CENSUS_MAPPED_FIPS};]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop City Name Override" guiX="305" guiY="878" id="DROP_CITY_NAME_OVERRIDE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table ${TMP_TABLE_CITY_NAME_OVERRIDE};]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop FIPS Map" guiX="-20" guiY="878" id="DROP_FIPS_MAP" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table ${TMP_TABLE_FIPS_MAP};]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Living Wage Override" guiX="484" guiY="878" id="DROP_LIVING_WAGE_OVERRIDE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table ${TMP_TABLE_LIVING_WAGE_OVERRIDE};]]></attr>
</Node>
</Phase>
</Graph>
