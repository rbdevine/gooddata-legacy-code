<?xml version="1.0" encoding="UTF-8"?><Graph author="hankmobley" created="Sun Sep 04 11:29:08 EDT 2016" description="This step generates all the data required for all industry and company summary reports.&#10;It does not generate the reports themselves, but rather makes data available for reports&#10;to be created separately.&#10;&#10;This graph only needs to be run if cut-criteria for what's included changes or if the underlying&#10;salary data is updated or added to (which is done in a separate step.)&#10;&#10;This graph assumes the main salaray data table has been generated. (As of this writing, the &#10;table is called, JUST_WAGE, but since we may be incorporating&#10;non-glassdoor data, may change it to LKP_FAIRPAY_SALARY_DW)." guiVersion="3.4.4.P" id="1473004233680" licenseType="Commercial" modified="Thu Jul 27 11:44:34 EDT 2017" modifiedBy="richdevine" name="FairPayGenerateLookupMatrix" revision="1.217" showComponentDetails="true">
<Global>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="RunGraph_Name" recordDelimiter="\n" type="delimited">
<Field name="Name" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="SQL_Industry_Queue" recordDelimiter="\n" type="delimited">
<Field name="sql" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="Ticker" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="Ticker" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property fileURL="wage.prm" id="GraphParameter0"/>
<Property fileURL="workspace.prm" id="GraphParameter66"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Accumulation Count" guiX="258" guiY="16" id="TABLE_ACCUMULATION_COUNT" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_SUBSIDY_ACCUMULATED_COUNT};
create table if not exists ${TABLE_SUBSIDY_ACCUMULATED_COUNT} (
  ID INTEGER NOT NULL UNIQUE,
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  TICKER VARCHAR(32) NOT NULL,
  SUBSIDIARY VARCHAR(64) NULL,
  JOC VARCHAR(128) NOT NULL,
  WAGE_HOURLY_RAW FLOAT NOT NULL,
  EMPLOYEE_COUNT FLOAT NOT NULL,
  EMPLOYEE_COUNT_MAX_PREV FLOAT NULL,
  EMPLOYEE_COUNT_MAX FLOAT NULL,
  EMPLOYEE_COUNT_MAX_PREV_ACA FLOAT NULL,
  EMPLOYEE_COUNT_MAX_ACA FLOAT NULL
);]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Subsidy Count" guiX="100" guiY="16" id="TABLE_SUBSIDY_COUNT" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_SUBSIDY_COUNT};
create table if not exists ${TABLE_SUBSIDY_COUNT} (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  TICKER VARCHAR(32) NOT NULL,
  SUBSIDIARY VARCHAR(64) NULL,
  JOC VARCHAR(128) NOT NULL,
  EMP_COUNT_EITC FLOAT NULL DEFAULT 0.0,
  EMP_COUNT_SNAP FLOAT NULL DEFAULT 0.0,
  EMP_COUNT_ADULT_MEDICAID FLOAT NULL DEFAULT 0.0,
  EMP_COUNT_CHILD_MEDICAID FLOAT NULL DEFAULT 0.0,
  EMP_COUNT_ACA FLOAT NULL DEFAULT 0.0
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Subsidy Detail" guiX="275" guiY="-60" id="TABLE_SUBSIDY_DETAIL" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[DROP TABLE IF EXISTS ${TABLE_SUBSIDY_DETAIL};
CREATE TABLE ${TABLE_SUBSIDY_DETAIL} (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL,
  TICKER VARCHAR(32) NOT NULL,
  SUBSIDIARY VARCHAR(64) NULL,
  JOC VARCHAR(128) NOT NULL,
  HOURLY_WAGE_RAW FLOAT NOT NULL,
  LIVING_WAGE_HOURLY FLOAT NOT NULL,
  STATE_MINIMUM_WAGE FLOAT NOT NULL,
  EMP_COUNT_TOTAL FLOAT NOT NULL,
  EMP_COUNT_SUBSIDY_TOTAL FLOAT NOT NULL,
  SUBSIDY_TOTAL FLOAT NOT NULL,
  EMP_COUNT_EITC FLOAT NOT NULL,
  SUBSIDY_TOTAL_EITC FLOAT NOT NULL,
  EMP_COUNT_SNAP FLOAT NOT NULL,
  SUBSIDY_TOTAL_SNAP FLOAT NOT NULL,
  EMP_COUNT_ADULT_MEDICAID FLOAT NOT NULL,
  SUBSIDY_TOTAL_ADULT_MEDICAID FLOAT NOT NULL,
  EMP_COUNT_CHILD_MEDICAID FLOAT NOT NULL,
  SUBSIDY_TOTAL_CHILD_MEDICAID FLOAT NOT NULL,
  EMP_COUNT_ACA FLOAT NOT NULL,
  SUBSIDY_TOTAL_ACA FLOAT NOT NULL
);
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Table: Subsidy Rate" guiX="104" guiY="-60" id="TABLE_SUBSIDY_RATE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_SUBSIDY_COUNTY_JOC_RATE};
create table if not exists ${TABLE_SUBSIDY_COUNTY_JOC_RATE} (
  STATE_COUNTY_FIPS VARCHAR(5) NOT NULL, 
  TICKER VARCHAR(32) NOT NULL,
  SUBSIDIARY VARCHAR(64) NULL,
  JOC VARCHAR(128) NOT NULL,
  EMPLOYEE_COUNT FLOAT NOT NULL,
  WAGE_HOURLY_RAW FLOAT NOT NULL
);]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Subsidy Rate Table" guiX="160" guiY="93" id="POPULATE_SUBSIDY_RATE_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_SUBSIDY_COUNTY_JOC_RATE}
/*
select 
  cd.state_county_fips,
  cd.ticker,
  cd.subsidiary,
  cd.joc,
  cast(cd.employee_count_total as integer) employee_count_total,
  AVG(cd.wage_hourly_raw_min_wage_adj) wage_hourly_raw 
from (
*/
  select 
    cd.state_county_fips,
    cd.ticker,
    cd.subsidiary,
    cd.joc,
    cd.employee_count_total*isnull(cm.employee_count_multiplier,1.0) employee_count_total,
    cd.wage_hourly_raw_min_wage_adj
  from ${TABLE_COMPANY_LOCATION_DETAIL} cd
  join (
    select
      c.ticker,
      null subsidiary,
      c.employee_count_multiplier
    from ${TABLE_COMPANY} c
    left join ${TABLE_SUBSIDIARY} s on s.ticker_parent = c.ticker
    where s.ticker_parent is null
    union all
    select
      c.ticker,
      s.subsidiary_name subsidiary,
      isnull(s.employee_count_multiplier,c.employee_count_multiplier) employee_count_multiplier
    from ${TABLE_SUBSIDIARY} s
    join ${TABLE_COMPANY} c on c.ticker = s.ticker_parent
    where s.ticker_subsidiary is null
    union all
    select
      c.ticker,
      null subsidiary,
      c.employee_count_multiplier
    from (select ticker_parent ticker from ${TABLE_SUBSIDIARY} where ticker_subsidiary is null group by ticker_parent) s
    join ${TABLE_COMPANY} c on c.ticker = s.ticker
    union all
    select
      s.ticker_subsidiary ticker,
      null subsidiary,
      isnull(s.employee_count_multiplier,c.employee_count_multiplier) employee_count_multiplier
    from (select ticker_parent, ticker_subsidiary, employee_count_multiplier from ${TABLE_SUBSIDIARY} where ticker_subsidiary is not null) s
    join ${TABLE_COMPANY} c on c.ticker = s.ticker_parent
  ) cm on cm.ticker = cd.ticker and isnull(cm.subsidiary,'') = isnull(cd.subsidiary,'')
  /*
  left join (select ticker_parent ticker from ${TABLE_SUBSIDIARY} where ticker_subsidiary is null group by ticker_parent) s on s.ticker = cd.ticker
  where s.ticker is null or cd.subsidiary is null
  */
  group by 
    cd.state_county_fips, 
    cd.ticker, 
    cd.subsidiary, 
    cd.joc, 
    cd.employee_count_total,
    cd.wage_hourly_raw_min_wage_adj,
    cm.employee_count_multiplier
/*
) cd
group by 
  cd.state_county_fips, 
  cd.ticker,
  cd.joc,
  cd.employee_count_total;
*/;]]></attr>
</Node>
</Phase>
<Phase number="2">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Accumulation Table" guiX="272" guiY="172" id="POPULATE_INDUSTRY_QUEUE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_SUBSIDY_ACCUMULATED_COUNT} (
  ID,
  STATE_COUNTY_FIPS,
  TICKER,
  SUBSIDIARY,
  JOC,
  WAGE_HOURLY_RAW,
  EMPLOYEE_COUNT
)
select 
  rank() over (order by ticker, subsidiary, state_county_fips, wage_hourly_raw, joc) id, 
  state_county_fips,
  ticker,
  subsidiary,
  joc,
  wage_hourly_raw,
  employee_count
from ${TABLE_SUBSIDY_COUNTY_JOC_RATE};]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Subsidy Count Table" guiX="57" guiY="172" id="POPULATE_SUBSIDY_COUNT_TABLE" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[insert into ${TABLE_SUBSIDY_COUNT} (
  state_county_fips, 
  ticker,
  subsidiary,
  joc
)
select 
  gc.state_county_fips,
  gc.ticker,
  gc.subsidiary,
  gc.joc
from ${TABLE_SUBSIDY_COUNTY_JOC_RATE} gc
group by 
  gc.state_county_fips, 
  gc.ticker,
  gc.subsidiary, 
  gc.joc
order by 
  gc.state_county_fips, 
  gc.ticker,
  gc.subsidiary,
  gc.joc;]]></attr>
</Node>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Add EITC Counts" guiX="190" guiY="248" id="ADD_EITC_COUNTS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_COUNT} sc
set EMP_COUNT_EITC = gc.employee_count
from (
  select gc.state_county_fips, gc.ticker, gc.subsidiary, gc.joc, gc.employee_count
  from ${TABLE_SUBSIDY_COUNTY_JOC_RATE} gc
  left join ${TABLE_SUBSIDY_EITC} eitc on eitc.minimum_wage <= gc.wage_hourly_raw and gc.wage_hourly_raw <= eitc.maximum_wage
  where eitc.subsidy_annual is not null
) gc where sc.state_county_fips = gc.state_county_fips and sc.ticker = gc.ticker and isnull(sc.subsidiary,'') = isnull(gc.subsidiary,'') and sc.joc = gc.joc;]]></attr>
</Node>
</Phase>
<Phase number="4">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Accumulation" guiX="180" guiY="324" id="UPDATE_ACCUMULATION1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a
set employee_count_max_prev = ac.employee_count_max_prev, employee_count_max = ac.employee_count_max
from (
  select 
    a1.id,
    a1.state_county_fips,
    a1.ticker,
    a1.subsidiary,
    a1.employee_count,
    sum(a2.employee_count)-a1.employee_count employee_count_max_prev,
    sum(a2.employee_count) employee_count_max
  from (
    select a.id, a.state_county_fips, a.ticker, a.subsidiary, a.employee_count 
    from ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a 
  ) a1
  join (
    select a.id, a.state_county_fips, a.ticker, a.subsidiary, a.employee_count 
    from ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a 
  ) a2 on a1.state_county_fips = a2.state_county_fips and a1.ticker = a2.ticker and isnull(a1.subsidiary,'') = isnull(a2.subsidiary,'') and a1.id >= a2.id
  group by a1.id, a1.state_county_fips, a1.ticker, a1.subsidiary, a1.employee_count
  order by state_county_fips, a1.ticker, a1.subsidiary, a1.id
) ac
where ac.id = a.id;]]></attr>
</Node>
</Phase>
<Phase number="5">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update Medical Totals" guiX="178" guiY="402" id="UPDATE_MEDICAL_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_COUNT} a
set 
  emp_count_adult_medicaid = ac.adult_county_medical_count, 
  emp_count_child_medicaid = ac.child_county_medical_count
from (
  select
    a.*,
    case
      when adult_medical_count > a.EMPLOYEE_COUNT_MAX then a.employee_count
      when adult_medical_count > a.EMPLOYEE_COUNT_MAX_PREV then adult_medical_count - a.employee_count_max_prev
      when adult_medical_count is null then 0.0  /*not sure if this is necessary, but doesn't hurt*/
      else 0.0
    end adult_county_medical_count,
    case
      when child_medical_count > a.EMPLOYEE_COUNT_MAX then a.employee_count
      when child_medical_count > a.EMPLOYEE_COUNT_MAX_PREV then child_medical_count - a.employee_count_max_prev
      when child_medical_count is null then 0.0  /*not sure if this is necessary, but doesn't hurt*/
      else 0.0
    end child_county_medical_count
  from (
    select
      a.*,
      gc.employee_count * mc.adult_medicaid_percentage * sd.adult_medicaid_participation_multiplier adult_medical_count,
      gc.employee_count * mc.child_medicaid_percentage * sd.child_medicaidchips_percentage_multiplier * sd.child_medicaid_participation_multiplier child_medical_count
    from ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a
    join (
      select 
        state_county_fips,
        ticker,
        subsidiary,
        sum(employee_count) employee_count
      from ${TABLE_SUBSIDY_COUNTY_JOC_RATE}
      group by 
        state_county_fips,
        ticker,
        subsidiary
    ) gc on gc.state_county_fips = a.state_county_fips and gc.ticker = a.ticker and isnull(gc.subsidiary,'') = isnull(a.subsidiary,'')
    join (select state_fips, state_abbreviation state from ${TABLE_CITY_FIPS} group by state_fips, state_abbreviation) fs on fs.state_fips = left(a.state_county_fips,2)
    join ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = a.ticker and isnull(c.subsidiary,'') = isnull(a.subsidiary,'')
    left join ${TABLE_SUBSIDY_MEDICAID_PARTICIPATION_BY_CODE} mc on mc.subsidy_code = c.subsidy_code
    left join ${TABLE_STATE_DETAIL} sd on sd.state = fs.state
  ) a
) ac
where ac.state_county_fips = a.state_county_fips and ac.ticker = a.ticker and isnull(ac.subsidiary,'') = isnull(a.subsidiary,'') and ac.joc = a.joc;]]></attr>
</Node>
</Phase>
<Phase number="6">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update ACA Boundaries" guiX="176" guiY="479" id="UPDATE_ACA_BOUNDARIES" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a
set 
  EMPLOYEE_COUNT_MAX_ACA = ac.EMPLOYEE_COUNT_MAX - ac.adult_medical_count_total, /*may mean max is negative, but that's okay*/
  EMPLOYEE_COUNT_MAX_PREV_ACA = ac.EMPLOYEE_COUNT_MAX_PREV - ac.adult_medical_count_total /*may mean prev is negative, but that's okay*/
from (
  select
    a.*,
    case
      when adult_medical_count > a.EMPLOYEE_COUNT_MAX then a.employee_count
      when adult_medical_count > a.EMPLOYEE_COUNT_MAX_PREV then adult_medical_count - a.employee_count_max_prev
      when adult_medical_count is null then 0.0  /*not sure if this is necessary, but doesn't hurt*/
      else 0.0
    end adult_county_medical_count,
    adult_medical_count adult_medical_count_total
  from (
    select
      a.*,
      gc.employee_count * mc.adult_medicaid_percentage * ms.adult_medicaid_participation_multiplier adult_medical_count
    from ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a
    join (
      select 
        state_county_fips,
        ticker,
        subsidiary,
        sum(employee_count) employee_count
      from ${TABLE_SUBSIDY_COUNTY_JOC_RATE}
      group by 
        state_county_fips,
        ticker,
        subsidiary
    ) gc on gc.state_county_fips = a.state_county_fips and gc.ticker = a.ticker and isnull(gc.subsidiary,'') = isnull(a.subsidiary,'')
    join (select state_fips, state_abbreviation state from ${TABLE_CITY_FIPS} group by state_fips, state_abbreviation) fs on fs.state_fips = left(a.state_county_fips,2)
    join ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = a.ticker and isnull(c.subsidiary,'') = isnull(a.subsidiary,'')
    left join ${TABLE_SUBSIDY_MEDICAID_PARTICIPATION_BY_CODE} mc on mc.subsidy_code = c.subsidy_code
    left join ${TABLE_STATE_DETAIL} ms on ms.state = fs.state
  ) a
) ac
where ac.state_county_fips = a.state_county_fips and ac.ticker = a.ticker and isnull(ac.subsidiary,'') = isnull(a.subsidiary,'') and ac.joc = a.joc;]]></attr>
</Node>
</Phase>
<Phase number="7">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update SNAP Totals" guiX="188" guiY="557" id="UPDATE_SNAP_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_COUNT} a
set
  emp_count_snap = ac.snap_county_count
from (
  select
    a.*,
    case
      when snap_count > a.EMPLOYEE_COUNT_MAX then a.employee_count
      when snap_count > a.EMPLOYEE_COUNT_MAX_PREV then snap_count - a.employee_count_max_prev
      when snap_count is null then 0.0  /*not sure if this is necessary, but doesn't hurt*/
      else 0.0
    end snap_county_count
  from (
    select
      a.*,
      gc.employee_count * (sc.participation_rate/100.0) * sd.snap_participation_multiplier snap_count
    from ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a
    join (
      select 
        state_county_fips,
        ticker,
        subsidiary,
        sum(employee_count) employee_count
      from ${TABLE_SUBSIDY_COUNTY_JOC_RATE}
      group by 
        state_county_fips,
        ticker,
        subsidiary
    ) gc on gc.state_county_fips = a.state_county_fips and gc.ticker = a.ticker and isnull(gc.subsidiary,'') = isnull(a.subsidiary,'')
    join (select state_fips, state_abbreviation state from ${TABLE_CITY_FIPS} group by state_fips, state_abbreviation) fs on fs.state_fips = left(a.state_county_fips,2)
    join ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = a.ticker and isnull(c.subsidiary,'') = isnull(a.subsidiary,'')
    left join ${TABLE_SUBSIDY_SNAP_PARTICIPATION_BY_CODE} sc on sc.subsidy_code = c.subsidy_code
    left join ${TABLE_STATE_DETAIL} sd on sd.state = fs.state
  ) a
) ac
where ac.state_county_fips = a.state_county_fips and ac.ticker = a.ticker and isnull(ac.subsidiary,'') = isnull(a.subsidiary,'') and ac.joc = a.joc;]]></attr>
</Node>
</Phase>
<Phase number="8">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Update ACA Totals" guiX="191" guiY="635" id="UPDATE_ACA_TOTALS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_COUNT} a
set 
  emp_count_aca = ac.county_aca_count
from (
  select
    a.*,
    case
      when a.EMPLOYEE_COUNT_MAX_ACA <= 0 then 0.0
      when emp_count_aca > a.EMPLOYEE_COUNT_MAX_ACA then (
        case
          when a.EMPLOYEE_COUNT_MAX_PREV_ACA < 0 then a.EMPLOYEE_COUNT_MAX_ACA
          else a.EMPLOYEE_COUNT_MAX_ACA - a.EMPLOYEE_COUNT_MAX_PREV_ACA
        end
      )
      when emp_count_aca > a.EMPLOYEE_COUNT_MAX_PREV_ACA then emp_count_aca - a.EMPLOYEE_COUNT_MAX_PREV_ACA
      when emp_count_aca is null then 0.0  /*not sure if this is necessary, but doesn't hurt*/
      else 0.0
    end county_aca_count
  from (
    select
      a.*,
      /*(gc.employee_count - sc.emp_count_adult_medicaid) * am.multiplier emp_count_aca*/
      gc.employee_count * (1.0 - mc.adult_medicaid_percentage - am.multiplier) emp_count_aca
    from ${TABLE_SUBSIDY_ACCUMULATED_COUNT} a
    join (
      select 
        state_county_fips,
        ticker,
        subsidiary,
        sum(employee_count) employee_count
      from ${TABLE_SUBSIDY_COUNTY_JOC_RATE}
      group by 
        state_county_fips,
        ticker,
        subsidiary
    ) gc on gc.state_county_fips = a.state_county_fips and gc.ticker = a.ticker and isnull(gc.subsidiary,'') = isnull(a.subsidiary,'')
    join (select state_fips, state_abbreviation state from ${TABLE_CITY_FIPS} group by state_fips, state_abbreviation) fs on fs.state_fips = left(a.state_county_fips,2)
    join ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = a.ticker and isnull(c.subsidiary,'') = isnull(a.subsidiary,'')
    join (
      select state_county_fips, ticker, subsidiary, sum(emp_count_adult_medicaid) emp_count_adult_medicaid
      from ${TABLE_SUBSIDY_COUNT}
      group by state_county_fips, ticker, subsidiary
    ) sc on sc.state_county_fips = gc.state_county_fips and sc.ticker = a.ticker and isnull(sc.subsidiary,'') = isnull(a.subsidiary,'')
    left join ${TABLE_SUBSIDY_ACA_MULTIPLIER} am on am.subsidy_code = c.subsidy_code
    left join ${TABLE_SUBSIDY_MEDICAID_PARTICIPATION_BY_CODE} mc on mc.subsidy_code = c.subsidy_code 
  ) a
) ac
where ac.state_county_fips = a.state_county_fips and ac.ticker = a.ticker and isnull(ac.subsidiary,'') = isnull(a.subsidiary,'') and ac.joc = a.joc;]]></attr>
</Node>
</Phase>
<Phase number="9">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Zero Living Wage Counts" guiX="173" guiY="713" id="ZERO_LIVING_WAGE_COUNTS" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[update ${TABLE_SUBSIDY_COUNT} a
set 
  emp_count_adult_medicaid = 0.0,
  emp_count_child_medicaid = 0.0,
  emp_count_snap = 0.0
from ${TABLE_SUBSIDY_COUNTY_JOC_RATE} gr
join ${TABLE_FIPS_DATA} f on f.state_county_fips = gr.state_county_fips and gr.wage_hourly_raw >= f.living_wage_hourly
where gr.state_county_fips = a.state_county_fips and gr.ticker = a.ticker and isnull(gr.subsidiary,'') = isnull(a.subsidiary,'') and gr.joc = a.joc;]]></attr>
</Node>
</Phase>
<Phase number="10">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Populate Subsidy Detail" guiX="177" guiY="789" id="POPULATE_SUBSIDY_DETAIL" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[INSERT INTO ${TABLE_SUBSIDY_DETAIL}
select
  state_county_fips,
  ticker,
  subsidiary,
  joc,
  wage_hourly_raw,
  living_wage_hourly,
  minimum_wage,
  emp_count_total,
  emp_count_subsidy_total,
  eitc_subsidy_total + snap_subsidy_total + adult_medicaid_subsidy_total + child_medicaid_subsidy_total + aca_subsidy_total subsidy_total,
  emp_count_eitc,
  eitc_subsidy_total, 
  emp_count_snap,
  snap_subsidy_total,
  emp_count_adult_medicaid,
  adult_medicaid_subsidy_total,
  emp_count_child_medicaid,
  child_medicaid_subsidy_total,
  emp_count_aca,
  aca_subsidy_total
from (
  select
    state_county_fips,
    ticker,
    subsidiary,
    joc,
    isnull(wage_hourly_raw,0.0) wage_hourly_raw,
    isnull(living_wage_hourly,0.0) living_wage_hourly,
    isnull(minimum_wage,0.0) minimum_wage,
    isnull(emp_count_total,0.0) emp_count_total, 
    isnull(emp_count_subsidy_total,0.0) emp_count_subsidy_total,
    isnull(emp_count_eitc,0.0) emp_count_eitc,
    isnull(eitc_subsidy_total/2.0,0.0) eitc_subsidy_total, 
    isnull(emp_count_snap,0.0) emp_count_snap,
    isnull(snap_subsidy_total/2.0,0.0) snap_subsidy_total,
    isnull(emp_count_adult_medicaid,0.0) emp_count_adult_medicaid,
    isnull(adult_medicaid_subsidy_total,0.0) adult_medicaid_subsidy_total,
    isnull(emp_count_child_medicaid,0.0) emp_count_child_medicaid,
    isnull(child_medicaid_subsidy_total/2.0,0.0) child_medicaid_subsidy_total,
    isnull(emp_count_aca,0.0) emp_count_aca,
    isnull(aca_subsidy_total/2.0,0.0) aca_subsidy_total
  from (
    select 
      sc.state_county_fips,
      sc.ticker,
      sc.subsidiary,
      sc.joc,
      gc.wage_hourly_raw,
      f.living_wage_hourly,
      sd.minimum_wage,
      gc.employee_count emp_count_total,
      case 
        when gc.wage_hourly_raw < f.living_wage_hourly then gc.employee_count
        else 0.0
      end emp_count_below_lw,
      case
        when 
          sc.emp_count_eitc > sc.emp_count_snap and
          sc.emp_count_eitc > sc.emp_count_adult_medicaid and
          sc.emp_count_eitc > sc.emp_count_child_medicaid and
          sc.emp_count_eitc > sc.emp_count_aca
        then sc.emp_count_eitc
        when
          sc.emp_count_snap > sc.emp_count_eitc and
          sc.emp_count_snap > sc.emp_count_adult_medicaid and
          sc.emp_count_snap > sc.emp_count_child_medicaid and
          sc.emp_count_snap > sc.emp_count_aca
        then sc.emp_count_snap
        when
          sc.emp_count_adult_medicaid > sc.emp_count_eitc and
          sc.emp_count_adult_medicaid > sc.emp_count_snap and
          sc.emp_count_adult_medicaid > sc.emp_count_child_medicaid and
          sc.emp_count_adult_medicaid > sc.emp_count_aca
        then sc.emp_count_adult_medicaid
        when
          sc.emp_count_child_medicaid > sc.emp_count_eitc and
          sc.emp_count_child_medicaid > sc.emp_count_snap and
          sc.emp_count_child_medicaid > sc.emp_count_adult_medicaid and
          sc.emp_count_child_medicaid > sc.emp_count_aca
        then emp_count_child_medicaid
        when 
          sc.emp_count_aca > sc.emp_count_eitc and
          sc.emp_count_aca > sc.emp_count_snap and
          sc.emp_count_aca > sc.emp_count_adult_medicaid and
          sc.emp_count_aca > sc.emp_count_child_medicaid
        then sc.emp_count_aca
        else
          emp_count_eitc
      end emp_count_subsidy_total,
      sc.emp_count_eitc,
      sc.emp_count_eitc * isnull(eitc.subsidy_annual,0.0) eitc_subsidy_total,
      sc.emp_count_snap,
      snap.subsidy_annual,
      sc.emp_count_snap * isnull(snap.subsidy_annual,0.0) snap_subsidy_total,
      sc.emp_count_adult_medicaid,
      sc.emp_count_adult_medicaid * isnull(sd.adult_medicaid_annual,0.0) adult_medicaid_subsidy_total,
      sc.emp_count_child_medicaid,
      sc.emp_count_child_medicaid * isnull(sd.child_medicaid_annual,0.0) child_medicaid_subsidy_total,
      case
        when isnull(aca_base.subsidy_annual,0.0) >= isnull(aca_lw.subsidy_annual,0.0) then 0.0
        else sc.emp_count_aca
      end emp_count_aca,
      (case
        when aca_lw.subsidy_annual is null then isnull(aca_base.subsidy_annual,0.0)
        when isnull(aca_base.subsidy_annual,0.0) >= isnull(aca_lw.subsidy_annual,0.0) then 0.0
        else aca_lw.subsidy_annual - isnull(aca_base.subsidy_annual,0.0)
      end) * sc.emp_count_aca aca_subsidy_total
    from ${TABLE_SUBSIDY_COUNT} sc
    join ${TABLE_SUBSIDY_COUNTY_JOC_RATE} gc on 
      gc.state_county_fips = sc.state_county_fips and 
      gc.ticker = sc.ticker and 
      isnull(gc.subsidiary,'') = isnull(sc.subsidiary,'') and
      gc.joc = sc.joc
    join ${TABLE_FIPS_DATA} f on f.state_county_fips = sc.state_county_fips
    join (select state_fips, state_abbreviation state from ${TABLE_CITY_FIPS} group by state_fips, state_abbreviation) fs on fs.state_fips = left(sc.state_county_fips,2)
    join (select ticker, subsidiary, subsidy_code from ${TABLE_COMPANY_LIVING_WAGE} group by ticker, subsidiary, subsidy_code) c on c.ticker = sc.ticker and isnull(c.subsidiary,'') = isnull(sc.subsidiary,'')
    join ${TABLE_STATE_DETAIL} sd on sd.state = fs.state
    left join ${TABLE_SUBSIDY_EITC} eitc on eitc.minimum_wage <= gc.wage_hourly_raw and gc.wage_hourly_raw <= eitc.maximum_wage
    left join ${TABLE_SUBSIDY_SNAP} snap on snap.subsidy_code = c.subsidy_code and snap.minimum_wage <= gc.wage_hourly_raw and gc.wage_hourly_raw <= snap.maximum_wage
    left join ${TABLE_SUBSIDY_ACA} aca_base on aca_base.minimum_wage <= gc.wage_hourly_raw and gc.wage_hourly_raw <= aca_base.maximum_wage
    left join ${TABLE_SUBSIDY_ACA} aca_lw on aca_lw.minimum_wage <= f.living_wage_hourly and f.living_wage_hourly <= aca_lw.maximum_wage
  ) t
) t
group by
  state_county_fips,
  ticker,
  subsidiary,
  joc,
  wage_hourly_raw,
  living_wage_hourly,
  minimum_wage,
  emp_count_total,
  emp_count_subsidy_total,
  emp_count_eitc,
  eitc_subsidy_total, 
  emp_count_snap,
  snap_subsidy_total,
  emp_count_adult_medicaid,
  adult_medicaid_subsidy_total,
  emp_count_child_medicaid,
  child_medicaid_subsidy_total,
  emp_count_aca,
  aca_subsidy_total
order by 
  state_county_fips, 
  wage_hourly_raw;
]]></attr>
</Node>
</Phase>
<Phase number="11">
<Node enabled="enabled" graphName="${GRAPH_DIR}/wage-analysis/report/subsidy/LivingWageSubsidyGenerateReportFilesOnly.grf" guiName="Run Reports" guiX="194" guiY="867" id="RUN_REPORTS" type="RUN_GRAPH"/>
</Phase>
<Phase number="12">
<Node dbConnection="JDBC0" enabled="enabled" guiName="Drop Accumulation Table" guiX="174" guiY="970" id="DROP_ACCUMULATION_TABLE1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[drop table if exists ${TABLE_SUBSIDY_ACCUMULATED_COUNT};]]></attr>
</Node>
</Phase>
</Graph>
