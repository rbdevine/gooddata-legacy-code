<?xml version="1.0" encoding="UTF-8"?><Graph author="hankmobley" created="Thu Sep 15 14:53:16 EDT 2016" description="Load up the living wage distributions." guiVersion="3.4.4.P" id="1473965616523" licenseType="Commercial" modified="Thu Jul 20 16:42:25 EDT 2017" modifiedBy="richdevine" name="LivingWageDistByJOC" revision="1.121" showComponentDetails="true">
<Global>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="Living_Wage_Averages" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="Ticker" type="string"/>
<Field name="Company" type="string"/>
<Field name="Subsidiary" type="string"/>
<Field name="Avg_lw_unweighted" type="string"/>
<Field name="Avg_lw_weighted" type="string"/>
<Field name="Payroll_avg_wage" type="string"/>
<Field name="Avg_wages_below_lw" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="Report_Details" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="state_county_fips" type="string"/>
<Field name="description_1" type="string"/>
<Field name="description_2" type="string"/>
<Field name="description_3" type="string"/>
<Field name="description_4" type="string"/>
<Field name="g1" type="string"/>
<Field name="g2" type="string"/>
<Field name="g3" type="string"/>
<Field name="g4" type="string"/>
<Field name="g5" type="string"/>
<Field name="g6" type="string"/>
<Field name="g7" type="string"/>
<Field name="g8" type="string"/>
<Field name="g9" type="string"/>
<Field name="g10" type="string"/>
<Field name="g11" type="string"/>
<Field name="g12" type="string"/>
<Field name="g13" type="string"/>
<Field name="g14" type="string"/>
<Field name="g15" type="string"/>
<Field name="g16" type="string"/>
<Field name="g17" type="string"/>
<Field name="g18" type="string"/>
<Field name="g19" type="string"/>
<Field name="g20" type="string"/>
<Field name="g21" type="string"/>
<Field name="g22" type="string"/>
<Field name="g23" type="string"/>
<Field name="g24" type="string"/>
<Field name="g25" type="string"/>
<Field name="g26" type="string"/>
<Field name="g27" type="string"/>
<Field name="g28" type="string"/>
<Field name="g29" type="string"/>
<Field name="g30" type="string"/>
<Field name="g31" type="string"/>
<Field name="g32" type="string"/>
<Field name="g33" type="string"/>
<Field name="g34" type="string"/>
<Field name="g35" type="string"/>
<Field name="g36" type="string"/>
<Field name="g37" type="string"/>
<Field name="g38" type="string"/>
<Field name="g39" type="string"/>
<Field name="g40" type="string"/>
<Field name="g41" type="string"/>
<Field name="g42" type="string"/>
<Field name="g43" type="string"/>
<Field name="g44" type="string"/>
<Field name="g45" type="string"/>
<Field name="g46" type="string"/>
<Field name="g47" type="string"/>
<Field name="g48" type="string"/>
<Field name="g49" type="string"/>
<Field name="g50" type="string"/>
<Field name="living_wage_total" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="Report_Score_Quality" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="Ticker" type="string"/>
<Field name="Company" type="string"/>
<Field name="Subsidiary" type="string"/>
<Field name="JOC" type="string"/>
<Field name="AvgPercentUnweighted" type="string"/>
<Field name="AvgPercentWeighted" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="," name="Report_Scores" recordDelimiter="\n" type="delimited">
<Field name="Ticker" type="string"/>
<Field name="Company" type="string"/>
<Field name="Subsidiary" type="string"/>
<Field name="Score" type="string"/>
<Field name="LWPerCounty" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property fileURL="graph/local/wage-local-parameters.prm" id="GraphParameter0"/>
<Property id="GraphParameter2" name="REPORTFILEPATH_BLSLWCOUNTY" value="${REPORTS_DIR}/BLSLWCounty.csv"/>
<Property id="GraphParameter3" name="REPORTFILEPATH_DETAILS" value="${REPORTS_DIR}/Details.csv"/>
<Property id="GraphParameter4" name="REPORTFILEPATH_LWAVG" value="${REPORTS_DIR}/LWAverages.csv"/>
<Property id="GraphParameter5" name="REPORTFILEPATH_SCOREQUALITY" value="${REPORTS_DIR}/ScoreQuality.csv"/>
<Property id="GraphParameter6" name="REPORTFILEPATH_SCORES" value="${REPORTS_DIR}/Scores.csv"/>
<Property id="GraphParameter7" name="REPORTS_DIR" value="${REPORTS_DIR_LW_LOCAL}"/>
<Property fileURL="wage.prm" id="GraphParameter8"/>
<Property fileURL="wage-staging.prm" id="GraphParameter73"/>
<Property fileURL="workspace.prm" id="GraphParameter95"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Reformat" guiX="223" guiY="25" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="223" guiY="248" id="REFORMAT2" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="223" guiY="136" id="REFORMAT3" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="223" guiY="351" id="REFORMAT4" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="disabled" guiName="Reformat" guiX="241" guiY="457" id="REFORMAT5" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Select Avg Living Wage" guiX="26" guiY="351" id="SELECT_AVG_LIVING_WAGE" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[SELECT
  $Ticker:=t.Ticker,
  $Company:=t.Company,
  $Subsidiary:=t.Subsidiary,
  $Avg_lw_unweighted:=t.Avg_lw_unweighted,
  $Avg_lw_weighted:=t.Avg_lw_weighted,
  $Payroll_avg_wage:=cast(round(sum(avg_per_joc),3) as numeric(36,3)),
  $Avg_wages_below_lw:=(
    case
      when sum(dist_contrib) = 0 then ''
      else cast(cast(round(sum(avg_per_joc_below_lw)/(sum(dist_contrib)/(sum(dist_contrib) + sum(dist_non_contrib))),3) as numeric(36,3)) as varchar(32))
    end
  )
FROM (
  SELECT
    a.*,
    q.joc,
    q.AVG_RATE_PROPORTION_WEIGHTED,
    d.distribution,
    a.AVG_LW_WEIGHTED * q.AVG_RATE_PROPORTION_WEIGHTED * d.distribution avg_per_joc,
    case
      when q.AVG_RATE_PROPORTION_WEIGHTED < 1.0 then a.AVG_LW_WEIGHTED * q.AVG_RATE_PROPORTION_WEIGHTED * d.distribution
      else 0.0
    end avg_per_joc_below_lw,
    case
      when q.AVG_RATE_PROPORTION_WEIGHTED < 1.0 then d.distribution
      else 0.0
    end dist_contrib,
    case
      when q.AVG_RATE_PROPORTION_WEIGHTED >= 1.0 then d.distribution
      else 0.0
    end dist_non_contrib
  FROM ${TABLE_LIVING_WAGE_AVERAGES_BY_COMPANY} a
  JOIN ${TABLE_SCORE_QUALITY_BY_COMPANY} q on q.ticker = a.ticker and ((q.subsidiary is null and a.subsidiary is null) or (q.subsidiary = a.subsidiary))
  JOIN ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = q.ticker and ((c.subsidiary is null and q.subsidiary is null) or (c.subsidiary = q.subsidiary))
  JOIN ${TABLE_JOC_DISTRIBUTION} d on d.ticker = q.ticker and d.joc = q.joc and (
    (c.has_subsidiaries and c.subsidiary is null and d.subsidiary is null) or
    (not c.has_subsidiaries and c.subsidiary is null) or
    (not c.has_subsidiaries and c.subsidiary is not null and c.subsidiary = d.subsidiary)
  )
) t
group by t.ticker, t.company, t.subsidiary, t.AVG_LW_UNWEIGHTED, t.AVG_LW_WEIGHTED
order by t.ticker, t.company, t.subsidiary;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="disabled" guiName="Select BLS and LW By County" guiX="26" guiY="457" id="SELECT_BLS_AND_LW_BY_COUNTY" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select 
  $state_county_fips:=state_county_fips,
  $description_1:=description_1, $description_2:=description_2, $description_3:=description_3, $description_4:=description_4,
  $g1:=g1, $g2:=g2, $g3:=g3, $g4:=g4, $g5:=g5, $g6:=g6, $g7:=g7, $g8:=g8, $g9:=g9, $g10:=g10,
  $g11:=g11, $g12:=g12, $g13:=g13, $g14:=g14, $g15:=g15, $g16:=g16, $g17:=g17, $g18:=g18, $g19:=g19, $g20:=g20,
  $g21:=g21, $g22:=g22, $g23:=g23, $g24:=g24, $g25:=g25, $g26:=g26, $g27:=g27, $g28:=g28, $g29:=g29, $g30:=g30,
  $g31:=g31, $g32:=g32, $g33:=g33, $g34:=g34, $g35:=g35, $g36:=g36, $g37:=g37, $g38:=g38, $g39:=g39, $g40:=g40,
  $g41:=g41, $g42:=g42, $g43:=g43, $g44:=g44, $g45:=g45, $g46:=g46, $g47:=g47, $g48:=g48, $g49:=g49, $g50:=g50,
  $living_wage_total:=living_wage_total
from ${TABLE_REPORT_MATRIX_LIVING_WAGE} mtx
join ${TABLE_REPORT_MATRIX_ROW_TYPE_LIVING_WAGE} rt on rt.row_type = mtx.row_type
where rt.row_type not in ('IND_HEADER_BLANK_BOTTOM_1','IND_HEADER_BLANK_BOTTOM_2')
order by industry, rt.row_section, ticker, subsidiary, rt.display_order, state_county_fips, tolerance_type, description_1, description_2, description_3, description_4;
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Select Details" guiX="26" guiY="25" id="SELECT_DETAILS" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select 
  $state_county_fips:=state_county_fips,
  $description_1:=description_1, $description_2:=description_2, $description_3:=description_3, $description_4:=description_4,
  $g1:=g1, $g2:=g2, $g3:=g3, $g4:=g4, $g5:=g5, $g6:=g6, $g7:=g7, $g8:=g8, $g9:=g9, $g10:=g10,
  $g11:=g11, $g12:=g12, $g13:=g13, $g14:=g14, $g15:=g15, $g16:=g16, $g17:=g17, $g18:=g18, $g19:=g19, $g20:=g20,
  $g21:=g21, $g22:=g22, $g23:=g23, $g24:=g24, $g25:=g25, $g26:=g26, $g27:=g27, $g28:=g28, $g29:=g29, $g30:=g30,
  $g31:=g31, $g32:=g32, $g33:=g33, $g34:=g34, $g35:=g35, $g36:=g36, $g37:=g37, $g38:=g38, $g39:=g39, $g40:=g40,
  $g41:=g41, $g42:=g42, $g43:=g43, $g44:=g44, $g45:=g45, $g46:=g46, $g47:=g47, $g48:=g48, $g49:=g49, $g50:=g50,
  $living_wage_total:=living_wage_total
from ${TABLE_REPORT_MATRIX_LIVING_WAGE} mtx
join ${TABLE_REPORT_MATRIX_ROW_TYPE_LIVING_WAGE} rt on rt.row_type = mtx.row_type
where rt.row_type not in ('IND_HEADER_BLANK_BOTTOM_1','IND_HEADER_BLANK_BOTTOM_2')
order by industry, rt.row_section, ticker, subsidiary, rt.display_order, state_county_fips, tolerance_type, description_1, description_2, description_3, description_4;
]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Select Scores" guiX="26" guiY="136" id="SELECT_SCORES" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select 
  $Ticker:=mtx.ticker, $Company:=c.company_name, $Subsidiary:=mtx.subsidiary, 
  $Score:=description_2, $LWPerCounty:=description_3
from ${TABLE_REPORT_MATRIX_LIVING_WAGE} mtx
join ${TABLE_COMPANY_LIVING_WAGE} c on c.ticker = mtx.ticker
join ${TABLE_REPORT_MATRIX_ROW_TYPE_LIVING_WAGE} rt on rt.row_type = mtx.row_type
where rt.row_type in ('CO_TICKER_COUNT_TOTAL','CO_SUBSIDIARY_COUNT_TOTAL')
group by mtx.ticker, c.company_name, mtx.subsidiary, description_2, description_3
order by mtx.ticker, mtx.subsidiary;]]></attr>
</Node>
<Node dbConnection="JDBC0" enabled="enabled" guiName="Select Score Quality" guiX="26" guiY="248" id="SELECT_SCORE_QUALITY" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[select 
  $Ticker:=ticker,
  $Company:=company,
  $Subsidiary:=subsidiary,
  $JOC:=joc,
  $AvgPercentUnweighted:=avg_rate_proportion_unweighted,
  $AvgPercentWeighted:=avg_rate_proportion_weighted
from ${TABLE_SCORE_QUALITY_BY_COMPANY}
order by ticker, company, subsidiary, joc;]]></attr>
</Node>
<Node enabled="enabled" fileURL="${REPORTFILEPATH_DETAILS}" guiName="Write Report" guiX="419" guiY="25" id="WRITE_REPORT" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${REPORTFILEPATH_SCORES}" guiName="Write Report" guiX="419" guiY="136" id="WRITE_REPORT1" outputFieldNames="true" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${REPORTFILEPATH_SCOREQUALITY}" guiName="Write Report" guiX="419" guiY="248" id="WRITE_REPORT2" outputFieldNames="true" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${REPORTFILEPATH_LWAVG}" guiName="Write Report" guiX="419" guiY="351" id="WRITE_REPORT3" outputFieldNames="true" type="DATA_WRITER"/>
<Node enabled="disabled" fileURL="${REPORTFILEPATH_BLSLWCOUNTY}" guiName="Write Report" guiX="419" guiY="457" id="WRITE_REPORT4" type="DATA_WRITER"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="WRITE_REPORT:0"/>
<Edge fromNode="REFORMAT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="WRITE_REPORT2:0"/>
<Edge fromNode="REFORMAT3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="WRITE_REPORT1:0"/>
<Edge fromNode="REFORMAT4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="WRITE_REPORT3:0"/>
<Edge fromNode="REFORMAT5:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="WRITE_REPORT4:0"/>
<Edge fromNode="SELECT_AVG_LIVING_WAGE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="REFORMAT4:0"/>
<Edge fromNode="SELECT_BLS_AND_LW_BY_COUNTY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="REFORMAT5:0"/>
<Edge fromNode="SELECT_DETAILS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="REFORMAT1:0"/>
<Edge fromNode="SELECT_SCORES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REFORMAT3:0"/>
<Edge fromNode="SELECT_SCORE_QUALITY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="REFORMAT2:0"/>
</Phase>
</Graph>
