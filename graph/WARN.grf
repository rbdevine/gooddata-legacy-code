<?xml version="1.0" encoding="UTF-8"?><Graph author="scalvillo" created="Fri Jun 10 20:56:50 EDT 2016" guiVersion="3.4.4.P" id="1466014046265" licenseType="Commercial" modified="Wed Aug 10 12:14:43 EDT 2016" modifiedBy="djbrown" name="Complete County File" revision="1.197" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="Warn_DB" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field label="Company Name" name="Company_Name" type="string"/>
<Field label="Location" name="Location" type="string"/>
<Field label="State" name="State" type="string"/>
<Field label="# Affected" name="Affected" type="string"/>
<Field label="Date" name="Date" type="string"/>
<Field label="URL" name="URL" type="string"/>
<Field label="Ticker" name="Ticker" type="string"/>
<Field name="JUST_County" type="string"/>
<Field name="JUST_State_Abbrev" type="string"/>
<Field name="JUST_City" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="Warn_File" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field label="Company Name" name="Company_Name" type="string"/>
<Field label="Location" name="Location" type="string"/>
<Field label="State" name="State" type="string"/>
<Field label="# Affected" name="Affected" type="string"/>
<Field label="Date" name="Date" type="string"/>
<Field label="URL" name="URL" type="string"/>
<Field label="Ticker" name="Ticker" type="string"/>
</Record>
</Metadata>
<Connection database="DSS" dbURL="jdbc:dss://secure.gooddata.com/gdc/dss/instances/d68eb234fff8f2750cbf7dd02b20fd0e" id="JDBC0" jdbcSpecific="DSS" name="GOODDATA_DEV" password="justcapital1!" type="JDBC" user="ps-etl+justcapital_research@gooddata.com"/>
<Property id="GraphParameter0" name="DOWNLOADFILEPATH" value="https://${S3ACCESSKEY}:${S3SECRETKEY}@${S3BUCKETNAME}.s3.amazonaws.com/ranking/warns/warn.xlsx"/>
<Property id="GraphParameter1" name="POPULATEERRORFILEPATH" value="${DATA_TMP_DIR}/warnerror.txt"/>
<Property id="GraphParameter2" name="READFILEPATH" value="${DATA_TMP_DIR}/warn.xlsx"/>
<Property id="GraphParameter3" name="TABLENAME" value="STG_WARN"/>
<Property fileURL="workspace.prm" id="GraphParameter4"/>
<Property id="GraphParameter18" name="WRITEFILEPATH" value="${DATA_TRANSFORM_DIR}/warn.txt"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="167" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="New note" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="376" x="662" y="143">
<attr name="text"><![CDATA[warn file was sent to us with a lot of line breaks in company names - need to avoid that from happening again for clean upload]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node baseURL="${DOWNLOADFILEPATH}" destination="${DATA_TMP_DIR}" enabled="enabled" guiName="File Download" guiX="280" guiY="27" id="FILE_DOWNLOAD" type="FILE_DOWNLOAD"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" fileURL="${WRITEFILEPATH}" guiName="CSV Writer" guiX="474" guiY="129" id="CSV_WRITER" quotedStrings="false" type="DATA_WRITER"/>
<Node enabled="enabled" guiName="Reformat" guiX="280" guiY="129" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Company_Name = $in.0.Company_Name;
	$out.0.Location = $in.0.Location;
	$out.0.State = $in.0.State;
	$out.0.Affected = $in.0.Affected;
	$out.0.Date = $in.0.Date;
	$out.0.URL = $in.0.URL;
	$out.0.Ticker = $in.0.Ticker;
	
	string county = upperCase(trim($in.0.Location));
	if (county != null)
	{
		//if (indexOf(county,"COUNTY") > 0)
		//{
			//county = replace(county,"[COUNTY]","");
		//}
		if (indexOf(county,"THOROFARE") > 0)
		{
			county = "GLOUCESTER";
		}
		if (indexOf(county,",") > 0)
		{
			county = left(county,indexOf(county,","));
		}
		else if (indexOf(county,"PIKES PEAK/TELLER") > 0)
		{
			county = replace(county,"[\\W|^)PIKES PEAK/TELLER(\\W|$]","TELLER");
		}
		else if (indexOf(county,"BELLEVUE & KIRKLAND") > 0)
		{
			county = replace(county,"[/(\\W|^)BELLEVUE & KIRKLAND(\\W|$)]","KING COUNTY");
		}
		else if (indexOf(county,"EDINBURG") > 0)
		{
			county = replace(county,"[/(\\W|^)EDINBURG(\\W|$)]","EDINBURGH");
		}
		else if (indexOf(county,"SOUTHEAST") > 0)
		{
			county = replace(county,"[/(\\W|^)SOUTHEAST(\\W|$)]","TRINIDAD");
		}
		else if (indexOf(county,"MALAGA") > 0)
		{
			county = replace(county,"[/(\\W|^)MALAGA(\\W|$)]","CHELAN");
		}
		else if (indexOf(county,"FORT POLK") > 0)
		{
			county = replace(county,"[/(\\W|^)FORT POLK(\\W|$)]","VERNON PARISH");
		}
		else if (indexOf(county,"CITY AND COUNTY OF SAN FRANCISCO") > 0)
		{
			county = replace(county,"[/(\\W|^)CITY AND COUNTY OF SAN FRANCISCO(\\W|$)]","SAN FRANCISCO");
		}
		else if (indexOf(county,"LEDGEWOOD") > 0)
		{
			county = replace(county,"[/(\\W|^)LEDGEWOOD(\\W|$)]","ROXBURY");
		}
		else if (indexOf(county,"SLDIEL") > 0)
		{
			county = replace(county,"[/(\\W|^)SLDIEL(\\W|$)]","SLIDELL");
		}
		else if (indexOf(county,"PARSIPPANY") > 0)
		{
			county = replace(county,"[/(\\W|^)PARSIPPANY(\\W|$)]","PARSIPPANY-TROY HILLS");
		}
		else if (indexOf(county,"WHITEHOUSE STATION") > 0)
		{
			county = replace(county,"[/(\\W|^)WHITEHOUSE STATION(\\W|$)]","READINGTON");
		}
		else if (indexOf(county,"BASKING RIDGE") > 0)
		{
			county = replace(county,"[[/(\\W|^)BASKING RIDGE(\\W|$)]]","BERNARDS");
		}
		else if (indexOf(county,"RURAL RESORT") > 0)
		{
			county = replace(county,"[[/(\\W|^)RURAL RESORT(\\W|$)]]","GARFIELD COUNTY");
		}
	}
		
	$out.0.JUST_County = county;
	$out.0.JUST_City = upperCase(trim($in.0.Location));
	$out.0.JUST_State_Abbrev = upperCase(trim($in.0.State));
	return ALL;
}		

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${READFILEPATH}" guiName="SpreadsheetDataReader" guiX="36" guiY="129" id="SPREADSHEET_DATA_READER" type="SPREADSHEET_READER"/>
<Edge fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="CSV_WRITER:0"/>
<Edge fromNode="SPREADSHEET_DATA_READER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="REFORMAT:0"/>
</Phase>
<Phase number="2">
<Node dbConnection="JDBC0" enabled="enabled" guiName="DROP TABLE" guiX="63" guiY="245" id="DROP_TABLE1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[DROP TABLE IF EXISTS ${TABLENAME};]]></attr>
</Node>
</Phase>
<Phase number="3">
<Node dbConnection="JDBC0" enabled="enabled" guiName="CREATE TABLE" guiX="280" guiY="245" id="CREATE_TABLE1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[CREATE TABLE IF NOT EXISTS ${TABLENAME} (
	COMPANY_NAME VARCHAR(255),
	LOCATION VARCHAR(255),
	STATE VARCHAR(255),
	AFFECTED VARCHAR(255),
	DATE VARCHAR(255),
	URL VARCHAR(255),
	TICKER VARCHAR(255),
	JUST_COUNTY VARCHAR(255),
	JUST_STATE_ABBREV VARCHAR(255),
	JUST_CITY VARCHAR(255)
);]]></attr>
</Node>
</Phase>
<Phase number="4">
<Node dbConnection="JDBC0" enabled="enabled" guiName="POPULATE TABLE" guiX="473" guiY="245" id="POPULATE_TABLE1" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[COPY ${TABLENAME} (
	COMPANY_NAME,
	LOCATION,
	STATE,
	AFFECTED,
	DATE,
	URL,
	TICKER,
	JUST_COUNTY,
	JUST_STATE_ABBREV,
	JUST_CITY
)
FROM LOCAL '${WRITEFILEPATH}'
EXCEPTIONS '${POPULATEERRORFILEPATH}'
ABORT ON ERROR;]]></attr>
</Node>
</Phase>
<Phase number="5">
<Node baseURL="${READFILEPATH}" enabled="disabled" guiName="Clean download" guiX="63" guiY="334" id="CLEAN_DOWNLOAD" type="FILE_DELETE"/>
<Node baseURL="${POPULATEERRORFILEPATH}" enabled="enabled" guiName="Clean error" guiX="280" guiY="334" id="CLEAN_ERROR" type="FILE_DELETE"/>
<Node baseURL="${WRITEFILEPATH}" enabled="enabled" guiName="Clean write" guiX="474" guiY="334" id="CLEAN_WRITE" type="FILE_DELETE"/>
</Phase>
</Graph>
